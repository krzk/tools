# SPDX-License-Identifier: GPL-2.0
#
# Copyright (c) 2021-2025 Krzysztof Kozlowski
# Author: Krzysztof Kozlowski <k.kozlowski.k@gmail.com>
#                             <krzk@kernel.org>
---
- name: Include vars
  include_vars:
    file: ~/etc/ansible/vars/buildbot-builder.yml

# Need to get required vars also for delegated hosts
- name: Include vars
  include_vars:
    file: ~/etc/ansible/vars/buildbot-builder.yml
  delegate_to: '{{ host_buildbot_master_ssh }}'
  delegate_facts: true

- name: Check requirements for variables
  debug:
  when: lookup('vars', item) is undefined
  loop:
    - buildbot_docker_conf_dir
    - buildbot_user
    - buildbot_home
    - buildbot_master_hostname
    - buildbot_worker_name
    - buildbot_worker_password
    - host_buildbot_master_ssh
    - user_buildbot_master_ssh

- name: Install Docker dependencies
  apt:
    name:
      - docker.io
      - python3-docker
    state: present
  tags: packages
  become: yes
  become_user: root
  register: docker_dependencies
  when: ansible_facts['os_family'] == 'Debian'

- name: Add buildbot to docker group
  user:
    name: '{{ buildbot_user }}'
    groups: 'docker'
    append: yes
  become: yes
  become_user: root

- name: Systemd enable Docker
  systemd:
    name: docker
    enabled: yes
    masked: no
  become: yes
  become_user: root

- name: Restart Docker
  service:
    name: docker
    state: restarted
  become: yes
  become_user: root
  when: docker_dependencies.changed | default(False)

- name: Create Docker build context
  file:
    path: '{{ buildbot_docker_conf_dir }}'
    state: directory
    mode: '0755'
  remote_user: '{{ buildbot_user }}'

- name: Install files
  template:
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
    mode: '{{ item.mode }}'
  with_items:
    - {src: 'Dockerfile.j2', dest: '{{ buildbot_docker_conf_dir }}/Dockerfile', mode: '0644'}
    - {src: 'buildbot.tac.j2', dest: '{{ buildbot_docker_conf_dir }}/buildbot.tac', mode: '0644'}
  remote_user: '{{ buildbot_user }}'

- name: Build buildbot-worker Docker image
  community.general.docker_image:
    name: '{{ buildbot_docker_image_name }}'
    build:
      path: '{{ buildbot_docker_conf_dir }}/'
      pull: yes
    source: build
    # Once built, docker would never rebuild the image
    force_source: yes
    state: present
  register: docker_image_build
  remote_user: '{{ buildbot_user }}'

- name: Create cache (.ccache) volume
  community.docker.docker_volume:
    name: '{{ buildbot_docker_container_name }}-ccache'

- name: Read remote buildbot SSH key
  ansible.builtin.slurp:
    src: '{{ buildbot_home }}/.ssh/id_rsa'
  register: ssh_key
  remote_user: '{{ buildbot_user }}'

- name: Restart buildbot-worker container
  community.general.docker_container:
    name: '{{ buildbot_docker_container_name }}'
    image: '{{ buildbot_docker_image_name }}'
    network_mode: host
    tmpfs:
      - '/tmp:rw,nosuid,nodev,exec'
    volumes:
      - '{{ buildbot_docker_container_name }}-ccache:/root/.cache/ccache:rw'
      - '/var/lib/mirror:/var/lib/mirror:ro'
      - '{{ buildbot_home }}/public_html:{{ buildbot_home }}/public_html:rw'
    state: started
    restart: yes
    restart_policy: unless-stopped
    env:
      BUILDMASTER: '{{ buildbot_master_hostname }}'
      BUILDMASTER_PORT: '9989'
      SSH_KEY_B64: '{{ ssh_key["content"] }}'
      WORKERNAME: '{{ buildbot_worker_name }}'
      WORKERPASS: '{{ buildbot_worker_password }}'
      WORKER_ENVIRONMENT_BLACKLIST: 'SSH_KEY_B64 WORKERPASS'
  remote_user: '{{ buildbot_user }}'
  when: docker_image_build.changed | default(False)

- name: Deploy worker auth to master
  lineinfile:
    path: 'master/master_auth.py'
    state: present
    insertafter: EOF
    regexp: '^master_auth_config\["{{ buildbot_worker_name }}-worker-pass"\] '
    line: 'master_auth_config["{{ buildbot_worker_name }}-worker-pass"] = "{{ buildbot_worker_password }}"'
  delegate_to: '{{ host_buildbot_master_ssh }}'
  remote_user: '{{ user_buildbot_master_ssh }}'
  # Ansible has trouble with concurrent steps on one machine -> gate,
  # so only one key is being stored eventually (last step overwrites).
  # Throttling solves the problem.
  throttle: 1
  when: docker_image_build.changed | default(False)

- debug:
    msg:
      - 'Manually restart Buildbot master'
  when: docker_image_build.changed | default(False)
