# -*- python -*-
# ex: set syntax=python:
#
# Copyright (c) 2016-2018 Krzysztof Kozlowski
# Author: Krzysztof Kozlowski <k.kozlowski.k@gmail.com>
#                             <krzk@kernel.org>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#
#
# TODO:
# - Use consistent name for multi_v7 (builders, but this would clear the history)
# - Enable config options (like PWM FAN etc.) only when needed and respective to
#	to current config style (so don't switch exynos to 'm' or multi_v7 to 'y'...
#	and the best would be to enable it in a coherent way - 'm' for multi_v7 so
#	deferred probe won't complain)

# TODO: buildbotNetUsageData

####### REPO CONFIG

# Web-interface URL
repo_krzk_web = 'https://git.kernel.org/pub/scm/linux/kernel/git/krzk/linux.git'
projects = {}
projects['krzk'] = {
    'name': 'krzk',
    'branches': True,
    # GIT URL for master
    'repo_git': 'git://git.kernel.org/pub/scm/linux/kernel/git/krzk/linux.git',
    # HTTP URL for slaves, Seoul R&D slave cannot work on GIT PROTOCOL
    'repo_http': 'http://git.kernel.org/pub/scm/linux/kernel/git/krzk/linux.git',
    'polling': 60,
}

projects['krzk-pinctrl'] = {
    'name': 'krzk-pinctrl',
    'branches': True,
    'repo_git': 'git://git.kernel.org/pub/scm/linux/kernel/git/pinctrl/samsung.git',
    'repo_http': 'http://git.kernel.org/pub/scm/linux/kernel/git/pinctrl/samsung.git',
    'polling': 60,
}

projects['mainline'] = {
    'name': 'mainline',
    'branches': ['master'],
    'repo_git': 'git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git',
    'repo_http': 'http://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git',
    'polling': 480,
}

projects['next'] = {
    'name': 'next',
    'branches': ['master', 'pending-fixes'],
    'repo_git': 'git://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next.git',
    'repo_http': 'http://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next.git',
    'polling': 480,
}

projects['stable'] = {
    'name': 'stable',
    'branches': ['linux-4.1.y', 'linux-4.4.y', 'linux-4.9.y',
                 'linux-4.13.y', 'linux-4.14.y', 'linux-4.15.y',
                 'linux-4.16.y'],
    'repo_git': 'git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git',
    'repo_http': 'http://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git',
    'polling': 480,
}

projects['stable-rc'] = {
    'name': 'stable-rc',
    'branches': projects['stable']['branches'],
    'repo_git': 'git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable-rc.git',
    'repo_http': 'http://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable-rc.git',
    'polling': 480,
}

want_pm_tests = False

from master_auth import master_auth_config

####### GLOBALS

from buildbot.plugins import *
from buildbot.schedulers.forcesched import ChoiceStringParameter

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

c['collapseRequests'] = False
# FIXME: revlinks do not work. Neither in builders nor in console log.
c['revlink'] = util.RevlinkMatch([r'git://git.kernel.org/pub/scm/linux/kernel/git/([^/]*)/([^/]*)$'],
                                 r'https://git.kernel.org/pub/scm/linux/kernel/git/\1/\2/commit/?id=%s')

####### BUILDSLAVES

c['workers'] = [
    worker.Worker('dumbo-slave',
                  master_auth_config['dumbo-slave-pass'],
                  max_builds=1,
                  # Clear git_env to fix rebuilds (rebuilds of jobs
                  # previously executed by osbuilder were reusing
                  # osbuilder's git_env).
                  properties={'git_env': {}}),
    worker.Worker('elm-slave',
                  master_auth_config['elm-slave-pass'], max_builds=1,
                  properties={'git_env': {}}),
    worker.Worker('kozik-lap-slave',
                  master_auth_config['kozik-lap-slave-pass'], max_builds=1,
                  properties={'git_env': {}}),
    worker.Worker('pi-slave',
                  master_auth_config['pi-slave-pass'], max_builds=1,
                  notify_on_missing=['k.kozlowski.k+buildbot@gmail.com'],
                  missing_timeout=60,
                  properties={'git_env': {}}),
]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

def get_gitpoller(project_name, workdir):
    return changes.GitPoller(
        projects[project_name]['repo_git'],
        project=projects[project_name]['name'],
        workdir=workdir,
        branches=projects[project_name]['branches'],
        pollAtLaunch=True,
        pollinterval=projects[project_name]['polling'])

c['change_source'] = []
# Cronjob for each gitpoller workdir
c['change_source'].append(get_gitpoller('krzk', 'gitpoller-workdir'))
c['change_source'].append(get_gitpoller('krzk-pinctrl', 'gitpoller-workdir-pinctrl'))
c['change_source'].append(get_gitpoller('mainline', 'gitpoller-workdir-mainline'))
c['change_source'].append(get_gitpoller('next', 'gitpoller-workdir-next'))
c['change_source'].append(get_gitpoller('stable', 'gitpoller-workdir-stable'))
c['change_source'].append(get_gitpoller('stable-rc', 'gitpoller-workdir-stable-rc'))

####### BUILDERS

# Builder names have to be defined before builders themself because
# some of configuring steps depend on them
builder_names_mainline = ['build-mainline-arm_exynos', 'build-mainline-arm_multi_v7']
builder_names_next = ['build-next-arm_exynos', 'build-next-arm_multi_v7']
builder_names_stable = ['build-stable-arm_exynos', 'build-stable-arm_multi_v7']
builder_names_stable_rc = ['build-stable-rc-arm_exynos', 'build-stable-rc-arm_multi_v7']
builder_names_krzk_check = ['build-checkpatch', 'build-dtbs']
builder_names_krzk = ['build-i386', 'build-x86_64', 'build-arm64', 'build-arm_def',
                      'build-arm_mini2440', 'build-arm_s3c2410', 'build-arm_s3c6400', 'build-arm_s5pv210',
                      'build-arm_tct_hammer', 'build-arm_exynos', 'build-arm_multi_v7']


# Static (executed during parsing of config) builder helpers
def builder_is_krzk_kernel(name):
    global builder_names_krzk
    if name in builder_names_krzk:
        return True
    return False

def builder_is_recent_kernel(name):
    # Next and mainline are recent
    if ('build-next' in name) or ('build-mainline' in name):
        return True
    # Builds from my tree are always recent
    if builder_is_krzk_kernel(name):
        return True
    # TODO: Test if stable is 4.15+?
    return False

def builder_is_krzk_static_cheker(name):
    return name in builder_names_krzk_check

def prioritize_builders(buildmaster, builders):
    """ Prioritize builders. Static checkers for krzk trees have
    the highest priority. Then krzk tree builders. Then the rest.
    Then prioritize ones with older job complete time.
    Then prioritize ones with older request time.

    Without the two last priorities, multiple jobs from one builder
    would be scheduled one by one. Instead round-robin is preferred.
    """
    global builder_names_krzk
    global builder_names_krzk_check

    builders.sort(key=lambda b: (not builder_is_krzk_static_cheker(b.name),
                                 not builder_is_krzk_kernel(b.name),
                                 b.getNewestCompleteTime(),
                                 b.getOldestRequestTime()),
                  reverse=False)
    return builders

c['prioritizeBuilders'] = prioritize_builders

cmd_make = 'build-slave.sh'

def cmd_make_config(config=None):
    if config == None:
        config = 'defconfig'
    else:
        config = str(config) + '_defconfig'
    return [cmd_make, config]

def steps_build_common(env, config=None):
    st = []
    step_name = str(config) + ' config' if config else 'defconfig'
    step_name = 'make ' + step_name
    st.append(steps.Git(repourl=util.Property('repository'),
                        # Run full/fresh checkout to get rid of any old DTBs or binaries from
                        # KBUILD_OUTPUT. For example when compiling stable kernel without
                        # given DTB, old DTB from linux-next might remain.
                        # Removal of them is necessary for boot tests so they do not re-use
                        # wrong binaries... and anyway it is nice to test clean build.
                        mode='full',
                        method='fresh',
                        haltOnFailure=True,
                        env=util.Property('git_env')))
    st.append(steps.Compile(command=cmd_make_config(config),
                            haltOnFailure=True, env=env, name=step_name))
    return st

# Trigger booting (and maybe tests from boot-builder).
# Not every configuration of board/tree/defconfig will be booted
# or run tests.
#
# Matrix of configurations:
#
# board \ tree | krzk | next | mainline | stable
# HC1          | ER   | ER   | ER       |
# U3           | ER,M | ER   | ER       | E
# XU           | ER   | E    | E        |
# XU3          | ER,M | ER   | ER       | E
#
# Legens:
# E: exynos_defconfig
# M: multi_v7_defconfig
# R: run tests (on chosen defconfig, so ER - tests on exynos_defconfig)
def steps_build_boot_trigger(name, config, env, out_dir):
    st = []
    masterdest_dir = u'bins-deploy/' + name + u'/%(prop:got_revision)s'
    st.append(steps.Compile(command=['build-slave-package.sh', name, out_dir],
                            haltOnFailure=True, env=env, name='Package for booting'))
    # Upload zImage, DTB and modules directory to master
    st.append(steps.FileUpload(
        workersrc=out_dir + u'arch/arm/boot/zImage',
        masterdest=util.Interpolate(masterdest_dir + '/zImage'),
        haltOnFailure=True, name='Upload zImage'))
    st.append(steps.FileUpload(
        workersrc=out_dir + u'arch/arm/boot/dts/exynos5422-odroidxu3-lite.dtb',
        masterdest=util.Interpolate(masterdest_dir + '/exynos5422-odroidxu3-lite.dtb'),
        haltOnFailure=True, name='Upload Odroid XU3 DTB'))
    st.append(steps.FileUpload(
        workersrc=out_dir + u'arch/arm/boot/dts/exynos4412-odroidu3.dtb',
        masterdest=util.Interpolate(masterdest_dir + '/exynos4412-odroidu3.dtb'),
        haltOnFailure=True, name='Upload Odroid U3 DTB'))

    # XU, XU4 and HC1 might be missing for older kernels
    st.append(steps.FileUpload(
        workersrc=out_dir + u'arch/arm/boot/dts/exynos5410-odroidxu.dtb',
        masterdest=util.Interpolate(masterdest_dir + '/exynos5410-odroidxu.dtb'),
        haltOnFailure=False, warnOnFailure=True, flunkOnFailure=False,
        name='Upload Odroid XU DTB'))
    st.append(steps.FileUpload(
        workersrc=out_dir + u'arch/arm/boot/dts/exynos5422-odroidxu4.dtb',
        masterdest=util.Interpolate(masterdest_dir + '/exynos5422-odroidxu4.dtb'),
        # In case of failure do not halt, do not fail and mark build as warning.
        # flunkOnFailure is by default True.
        haltOnFailure=False, warnOnFailure=True, flunkOnFailure=False,
        name='Upload Odroid XU4 DTB'))
    st.append(steps.FileUpload(
        workersrc=out_dir + u'arch/arm/boot/dts/exynos5422-odroidhc1.dtb',
        masterdest=util.Interpolate(masterdest_dir + '/exynos5422-odroidhc1.dtb'),
        haltOnFailure=False, warnOnFailure=True, flunkOnFailure=False,
        name='Upload Odroid HC1 DTB'))

    st.append(steps.FileUpload(
        workersrc=out_dir + 'modules-out.tar.gz',
        masterdest=util.Interpolate(masterdest_dir + '/modules-out.tar.gz'),
        haltOnFailure=True, name='Upload modules'))

    if config == 'exynos' or builder_is_krzk_kernel(name):
        # Boot XU3 and U3 on:
        #  - exynos_defconfig - always
        #  - multi_v7_defconfig - only krzk tree
        # See: Matrix of configurations
        st.append(steps.Trigger(
            schedulerNames=['boot-odroid-xu3-' + config],
            name='Boot Odroid XU3',
            set_properties={'trigger_builder': name}))
        st.append(steps.Trigger(
            schedulerNames=['boot-odroid-u3-' + config],
            name='Boot Odroid U3',
            set_properties={'trigger_builder': name}))
    if config == 'exynos' and builder_is_recent_kernel(name):
        # Boot XU and HC1 on:
        #  - exynos_defconfig - only recent trees
        #  - multi_v7_defconfig - never
        # See: Matrix of configurations
        st.append(steps.Trigger(
            schedulerNames=['boot-odroid-xu-' + config],
            name='Boot Odroid XU',
            set_properties={'trigger_builder': name}))
        st.append(steps.Trigger(
            schedulerNames=['boot-odroid-hc1-' + config],
            name='Boot Odroid HC1',
            set_properties={'trigger_builder': name}))
    return st

f_env = {
    'i386': {'ARCH': 'i386'},
    'x86_64': {'ARCH': 'x86_64'},
    'arm': {'ARCH': 'arm'},
    'arm64': {'ARCH': 'arm64'},
}
for key in f_env:
    f_env[key]['KBUILD_OUTPUT'] = 'out/'
    f_env[key]['PATH'] = '/opt/tools/buildbot:/usr/local/bin:${PATH}'

def steps_build_boot_adjust_config(builder_name, env, slaves, config):
    st = []
    if not config:
        raise ValueError('Missing config for booting')
    if not env['KBUILD_OUTPUT']:
        raise ValueError('Missing KBUILD_OUTPUT path in environment')
    st.append(steps.ShellCommand(
        command=['scripts/config', '--file', env['KBUILD_OUTPUT'] + '.config',
                 # Enable IPV6 for Odroid systemd, AUTOFS4_FS/NFS_V4 will be in exynos_defconfig around v4.5
                 '-e', 'IPV6', '-e', 'NFS_V4',
                 # Enable fan so it won't be spinning on full speed on multi_v7
                 # (PWM_FAN will be in multi_v7 around v4.5-4.6 but both
                 # won't be in older stables)
                 '-e', 'SENSORS_PWM_FAN', '-e', 'PWM_SAMSUNG',
                 # s5p-sss tests need status of selftest
                 '-d', 'CRYPTO_MANAGER_DISABLE_TESTS',
                 # Want DMATEST and TCRYPT for tests
                 '-e', 'DMATEST', '-m', 'CRYPTO_TEST',
                 # Enable Lockdep and other debugging non-heavy tools
                 '-e', 'SCHED_STACK_END_CHECK', '-e', 'DEBUG_LOCK_ALLOC',
                 '-e', 'DEBUG_ATOMIC_SLEEP', '-e', 'DEBUG_LIST',
                 # Enable build-time debugging
                 '-e', 'DEBUG_SECTION_MISMATCH',
                 # SECCOMP is required by newer Arch ARM systemd
                 '-e', 'SECCOMP',
                ],
        haltOnFailure=True,
        env=env, name='Toggle config options'))
    st.append(steps.Compile(command=[cmd_make, 'olddefconfig'],
                            haltOnFailure=True,
                            env=env, name='Make olddefconfig'))
    return st

def get_builder(builder_name, env, slaves, config=None, boot=False):
    f = util.BuildFactory()
    f.addSteps(steps_build_common(env, config))
    f.addStep(steps.Compile(command=[cmd_make], haltOnFailure=True, env=env, name='Build kernel'))
    if boot:
        f.addSteps(steps_build_boot_adjust_config(builder_name, env, slaves, config))
        f.addStep(steps.Compile(command=[cmd_make], haltOnFailure=True, env=env, name='Build kernel (with booting addons)'))
    f.addStep(steps.FileUpload(
        workersrc=env['KBUILD_OUTPUT'] + u'.config',
        masterdest=util.Interpolate(u'bins-deploy/' + builder_name + u'/%(prop:got_revision)s-config'),
        haltOnFailure=True, name='Upload config'))
    if boot and config:
        f.addSteps(steps_build_boot_trigger(builder_name, config,
                                            env, env['KBUILD_OUTPUT']))
    return util.BuilderConfig(name=builder_name,
                              workernames=slaves,
                              workerbuilddir='builddir',
                              factory=f)

def get_checkpatch_builder(builder_name, env, slaves, config=None):
    f = util.BuildFactory()
    f.addSteps(steps_build_common(env, config))
    f.addStep(steps.ShellCommand(command=['scripts/checkpatch.pl', '-g', util.Property('got_revision')],
                                 haltOnFailure=True, env=env, name='Run checkpatch on commit'))
    return util.BuilderConfig(name=builder_name,
                              workernames=slaves,
                              workerbuilddir='builddir',
                              factory=f)

def steps_checkdtbs(env, config=None):
    st = []
    st += steps_build_common(env, config)
    step_name = str(config) + ' config' if config else 'defconfig'
    step_name = 'make dtbs with warnings for ' + env['ARCH'] + '/' + step_name
    st.append(steps.Compile(command=[cmd_make, 'dtbs', 'W=1'],
                            haltOnFailure=True,
                            env=env, name=step_name))
    return st

def get_checkdtbs_builder(builder_name, slaves):
    f = util.BuildFactory()
    f.addSteps(steps_checkdtbs(f_env['arm'], 'exynos'))
    f.addSteps(steps_checkdtbs(f_env['arm'], 's3c2410'))
    f.addSteps(steps_checkdtbs(f_env['arm'], 's3c6400'))
    f.addSteps(steps_checkdtbs(f_env['arm'], 's5pv210'))
    f.addSteps(steps_checkdtbs(f_env['arm64']))
    return util.BuilderConfig(name=builder_name,
                              workernames=slaves,
                              workerbuilddir='builddir',
                              factory=f)

slave_all = ['dumbo-slave', 'elm-slave', 'kozik-lap-slave']
slave_arm = list(slave_all)
slave_boot = ['pi-slave']

c['builders'] = []
c['builders'].append(get_builder('build-i386', f_env['i386'], slave_all))
c['builders'].append(get_builder('build-x86_64', f_env['x86_64'], slave_all))
c['builders'].append(get_builder('build-arm64', f_env['arm64'], slave_all))
c['builders'].append(get_builder('build-arm_def', f_env['arm'], slave_arm))
c['builders'].append(get_builder('build-arm_mini2440', f_env['arm'], slave_arm, 'mini2440'))
c['builders'].append(get_builder('build-arm_s3c2410', f_env['arm'], slave_arm, 's3c2410'))
c['builders'].append(get_builder('build-arm_s3c6400', f_env['arm'], slave_arm, 's3c6400'))
c['builders'].append(get_builder('build-arm_s5pv210', f_env['arm'], slave_arm, 's5pv210'))
c['builders'].append(get_builder('build-arm_tct_hammer', f_env['arm'], slave_arm, 'tct_hammer'))
c['builders'].append(get_builder('build-arm_exynos', f_env['arm'], slave_arm, 'exynos', True))
c['builders'].append(get_builder('build-arm_multi_v7', f_env['arm'], slave_arm, 'multi_v7', True))

# After getting names for builder_names_krzk, builders for other:
# TODO: Smarter way of generation builders and schedulers
# TODO: The builders will use same builddirs on slaves as for krzk repo which will
#		cause huge rebuild (especially after next change).
#		Maybe separate directory for repos? This could speed up building in case of multiple
#		jobs coming from repos in same time.
#		But will that help? Still the repo resides in builddir's parent and revision has to
#		to be checked out so all sources will change?
# Builder build-checkpatch is not really part of regular krzk builders because it skips master branch
c['builders'].append(get_checkpatch_builder('build-checkpatch', f_env['arm'], slave_all))
c['builders'].append(get_checkdtbs_builder('build-dtbs', slave_arm))
c['builders'].append(get_builder('build-mainline-arm_exynos', f_env['arm'], slave_arm, 'exynos', True))
c['builders'].append(get_builder('build-mainline-arm_multi_v7', f_env['arm'], slave_arm, 'multi_v7'))
c['builders'].append(get_builder('build-next-arm_exynos', f_env['arm'], slave_arm, 'exynos', True))
c['builders'].append(get_builder('build-next-arm_multi_v7', f_env['arm'], slave_arm, 'multi_v7'))
# Stable only with Exynos because multi_v7 could lack a lot of stuff for Odroid
c['builders'].append(get_builder('build-stable-arm_exynos', f_env['arm'], slave_arm, 'exynos', True))
c['builders'].append(get_builder('build-stable-arm_multi_v7', f_env['arm'], slave_arm, 'multi_v7'))
c['builders'].append(get_builder('build-stable-rc-arm_exynos', f_env['arm'], slave_arm, 'exynos', True))
c['builders'].append(get_builder('build-stable-rc-arm_multi_v7', f_env['arm'], slave_arm, 'multi_v7'))

builder_names_build = []
for builder in c['builders']:
    builder_names_build.append(str(builder.name))

# Boot/Deployers
def boot_is_recent_kernel(step):
    # Match stable and stable-rc:
    if 'stable' in str(step.getProperty('project', default='none')):
        return False
    return True

f_env_odroid = {'PATH': '/opt/tools/buildbot:/opt/tools/pi:/usr/local/bin:${PATH}'}

# Run some of the PM-QA tests. I don't want heating tests
# (thermal, cpufreq) because they stress the board needlessly.
def step_boot_run_pm_tests(target, config):
    st = []
    st.append(steps.ShellCommand(
        command=['build-slave-target-cmd.sh', target, config,
                 '/usr/sbin/make -C /opt/pm-qa/cpuhotplug check'],
        logfiles={'serial0': 'serial.log'},
        lazylogfiles=True,
        env=f_env_odroid, name='PM-QA cpuhotplug tests: ' + target,
        haltOnFailure=True, doStepIf=boot_is_recent_kernel))
    st.append(steps.ShellCommand(
        command=['build-slave-target-cmd.sh', target, config,
                 '/usr/sbin/make -C /opt/pm-qa/cpuidle check'],
        logfiles={'serial0': 'serial.log'},
        lazylogfiles=True,
        env=f_env_odroid, name='PM-QA cpuidle tests: ' + target,
        haltOnFailure=True, doStepIf=boot_is_recent_kernel))
    st.append(steps.ShellCommand(
        command=['build-slave-target-cmd.sh', target, config,
                 '/usr/sbin/make -C /opt/pm-qa/cputopology check'],
        logfiles={'serial0': 'serial.log'},
        lazylogfiles=True,
        env=f_env_odroid, name='PM-QA cputopology tests: ' + target,
        haltOnFailure=True, doStepIf=boot_is_recent_kernel))
    return st

def step_boot_run_test(target, config, test):
    return steps.ShellCommand(
        command=['build-slave-target-cmd.sh', target, config,
                 '/opt/tools/tests/' + test + '.sh',
                 target, config],
        logfiles={'serial0': 'serial.log'},
        lazylogfiles=True,
        env=f_env_odroid, name='Test: ' + test + ' @' + target,
        haltOnFailure=False,
        doStepIf=boot_is_recent_kernel)

def steps_boot_run_tests(target, config):
    st = []
    st.append(step_boot_run_test(target, config, 'drm'))
    if target != 'odroidhc1':
        st.append(step_boot_run_test(target, config, 'pwm-fan'))
    st.append(step_boot_run_test(target, config, 'cpu-online'))
    st.append(step_boot_run_test(target, config, 'thermal'))
    st.append(step_boot_run_test(target, config, 'odroid-xu3-board-name'))
    if target == 'odroidxu3':
        # Intensive and not that important test, run it only on XU3
        st.append(step_boot_run_test(target, config, 'cpu-mmc-stress'))
    st.append(step_boot_run_test(target, config, 's5p-sss'))
    st.append(step_boot_run_test(target, config, 's5p-sss-cryptsetup'))
    st.append(step_boot_run_test(target, config, 'usb'))
    st.append(step_boot_run_test(target, config, 'var-all'))
    st.append(step_boot_run_test(target, config, 'clk-s2mps11'))
    if target != 'odroidhc1':
        st.append(step_boot_run_test(target, config, 'audio'))
    # RTC often fail on NFS root so put it at the end
    # Also RTC of max77686 seems to fail pretty often, so skip U3:
    if target != 'odroidu3':
	    st.append(step_boot_run_test(target, config, 'rtc'))
    # RNG does not work on Odroid, missing clock enable?
    # st.append(step_boot_run_test(target, config, 'rng-exynos'))
    st.append(step_boot_run_test(target, config, 'audss'))

    if want_pm_tests:
        st = st + step_boot_run_pm_tests(target, config)
    return st

def get_boot_builder(builder_name, target, config):
    f = util.BuildFactory()
    mastersrc_dir = u'bins-deploy/%(prop:trigger_builder)s/%(prop:revision)s'
    f.addStep(steps.ShellCommand(
        command=['rm', '-fr', 'lib', 'deploy-modules-out.tar.gz', 'initramfs-odroidxu3.img'],
        env=f_env_odroid, name='Remove old binaries'))
    f.addStep(steps.FileDownload(
        mastersrc=util.Interpolate(mastersrc_dir + '/zImage'),
        workerdest=u'/srv/tftp/zImage',
        haltOnFailure=True, mode=0664, name='Download zImage'))
    f.addStep(steps.FileDownload(
        mastersrc=util.Interpolate(mastersrc_dir + '/exynos5422-odroidxu3-lite.dtb'),
        workerdest=u'/srv/tftp/exynos5422-odroidxu3-lite.dtb',
        haltOnFailure=True, mode=0664, name='Download Odroid XU3 DTB'))
    f.addStep(steps.FileDownload(
        mastersrc=util.Interpolate(mastersrc_dir + '/exynos4412-odroidu3.dtb'),
        workerdest=u'/srv/tftp/exynos4412-odroidu3.dtb',
        haltOnFailure=True, mode=0664, name='Download Odroid U3 DTB'))

    # XU, XU4 and HC1 might be missing for older kernels
    f.addStep(steps.FileDownload(
        mastersrc=util.Interpolate(mastersrc_dir + '/exynos5410-odroidxu.dtb'),
        workerdest=u'/srv/tftp/exynos5410-odroidxu.dtb',
        haltOnFailure=False, warnOnFailure=True, flunkOnFailure=False,
        mode=0664, name='Download Odroid XU DTB'))
    f.addStep(steps.FileDownload(
        mastersrc=util.Interpolate(mastersrc_dir + '/exynos5422-odroidxu4.dtb'),
        workerdest=u'/srv/tftp/exynos5422-odroidxu4.dtb',
        # In case of failure do not halt, do not fail and mark build as warning.
        # flunkOnFailure is by default True.
        haltOnFailure=False, warnOnFailure=True, flunkOnFailure=False,
        mode=0664, name='Download Odroid XU4 DTB'))
    f.addStep(steps.FileDownload(
        mastersrc=util.Interpolate(mastersrc_dir + '/exynos5422-odroidhc1.dtb'),
        workerdest=u'/srv/tftp/exynos5422-odroidhc1.dtb',
        haltOnFailure=False, warnOnFailure=True, flunkOnFailure=False,
        mode=0664, name='Download Odroid HC1 DTB'))

    f.addStep(steps.FileDownload(
        mastersrc=util.Interpolate(mastersrc_dir + '/modules-out.tar.gz'),
        workerdest='deploy-modules-out.tar.gz',
        haltOnFailure=True, mode=0644, name='Download modules'))
    f.addStep(steps.ShellCommand(
        command=['build-slave-deploy.sh', target, config, util.Property('revision')],
        haltOnFailure=True, env=f_env_odroid,
        name='Deploy on server binaries for booting'))
    f.addStep(steps.SetPropertyFromCommand(
        command='ls lib/modules', property='kernel_version', haltOnFailure=True))
    f.addStep(steps.ShellCommand(
        command=['build-slave-boot.sh', target, config],
        logfiles={'serial0': 'serial.log'},
        lazylogfiles=True,
        env=f_env_odroid, name='Boot: ' + target, haltOnFailure=True))
    if (config == 'exynos') and (target == 'odroidxu3' or target == 'odroidhc1' or target == 'odroidu3'):
        # Run tests only on exynos_defconfig because on multi_v7 some tests hang
        # the buildbot console and some fail because of missing modules
        # (like sound).
        # This requires also decent kernel, so do not run on stable.
        # See: Matrix of configurations
        f.addSteps(steps_boot_run_tests(target, config))

    f.addStep(steps.ShellCommand(
        command=['build-slave-poweroff.sh', target, config],
        logfiles={'serial0': 'serial.log'},
        lazylogfiles=True,
        env=f_env_odroid, name='Power off: ' + target, haltOnFailure=False,
        alwaysRun=True))
    return util.BuilderConfig(name=builder_name,
                              workernames=slave_boot,
                              workerbuilddir='builddir',
                              factory=f)

c['builders'].append(get_boot_builder('boot-odroid-u3-multi_v7', 'odroidu3', 'multi_v7'))
c['builders'].append(get_boot_builder('boot-odroid-u3-exynos', 'odroidu3', 'exynos'))
c['builders'].append(get_boot_builder('boot-odroid-xu-multi_v7', 'odroidxu', 'multi_v7'))
c['builders'].append(get_boot_builder('boot-odroid-xu-exynos', 'odroidxu', 'exynos'))
c['builders'].append(get_boot_builder('boot-odroid-xu3-multi_v7', 'odroidxu3', 'multi_v7'))
c['builders'].append(get_boot_builder('boot-odroid-xu3-exynos', 'odroidxu3', 'exynos'))
c['builders'].append(get_boot_builder('boot-odroid-hc1-multi_v7', 'odroidhc1', 'multi_v7'))
c['builders'].append(get_boot_builder('boot-odroid-hc1-exynos', 'odroidhc1', 'exynos'))

builder_names_boot = ['boot-odroid-u3-multi_v7', 'boot-odroid-u3-exynos',
                      'boot-odroid-xu3-multi_v7', 'boot-odroid-xu3-exynos',
                      'boot-odroid-xu-multi_v7', 'boot-odroid-xu-exynos',
                      'boot-odroid-hc1-multi_v7', 'boot-odroid-hc1-exynos']

####### SCHEDULERS

# Building schedulers
import re
author_krzk = 'kozlowski'
# Change instance: Change(revision=u'', who=u'', branch=u'', comments=u'', when=, category=None, project=u'', repository=REPO, codebase=u'')
def change_commit_is_krzk(change):
    if re.search(author_krzk, change.who, flags=re.IGNORECASE):
        return True
    if re.search(author_krzk, change.comments, flags=re.IGNORECASE):
        return True
    return False

def branch_krzk(branch):
    return branch not in ['master', '__about_repo__']

# treeStableTimer=None, for building each commit
c['schedulers'] = []
for project in ('krzk', 'krzk-pinctrl'):
    c['schedulers'].append(schedulers.AnyBranchScheduler(
        name=projects[project]['name'],
        treeStableTimer=None,
        fileIsImportant=change_commit_is_krzk,
        change_filter=util.ChangeFilter(project=projects[project]['name'],
                                        branch_fn=branch_krzk),
        builderNames=builder_names_krzk + builder_names_krzk_check))
    c['schedulers'].append(schedulers.SingleBranchScheduler(
        name=projects[project]['name'] + '-master',
        treeStableTimer=(projects[project]['polling'] + 30), # Poller + slack
        change_filter=util.ChangeFilter(project=projects[project]['name'],
                                        branch='master'),
        builderNames=builder_names_krzk))

c['schedulers'].append(schedulers.SingleBranchScheduler(
    name=projects['mainline']['name'],
    treeStableTimer=(2*projects[project]['polling'] + 30), # 2*Poller + slack
    change_filter=util.ChangeFilter(project=projects['mainline']['name'],
                                    branch=projects['mainline']['branches'][0]),
    builderNames=builder_names_mainline))
c['schedulers'].append(schedulers.AnyBranchScheduler(
    name=projects['next']['name'],
    treeStableTimer=(2*projects[project]['polling'] + 30), # 2*Poller + slack
    change_filter=util.ChangeFilter(project=projects['next']['name']),
    builderNames=builder_names_next))
c['schedulers'].append(schedulers.AnyBranchScheduler(
    name=projects['stable']['name'],
    treeStableTimer=(2*projects[project]['polling'] + 30), # 2*Poller + slack
    change_filter=util.ChangeFilter(project=projects['stable']['name']),
    builderNames=builder_names_stable))
c['schedulers'].append(schedulers.AnyBranchScheduler(
    name=projects['stable-rc']['name'],
    treeStableTimer=(2*projects[project]['polling'] + 30), # 2*Poller + slack
    change_filter=util.ChangeFilter(project=projects['stable-rc']['name']),
    builderNames=builder_names_stable_rc))
c['schedulers'].append(schedulers.ForceScheduler(
    name='force',
    builderNames=builder_names_build))
c['schedulers'].append(schedulers.ForceScheduler(
    name='force-boot',
    properties=[ChoiceStringParameter(name='trigger_builder',
                                      choices=['build-arm_exynos',
                                               'build-arm_multi_v7',
                                               'build-mainline-arm_exynos',
                                               'build-mainline-arm_multi_v7',
                                               'build-next-arm_exynos',
                                               'build-next-arm_multi_v7',
                                               'build-stable-arm_exynos',
                                               'build-stable-rc-arm_exynos'],
                                      default='build-arm_exynos',
                                      strict=True)],
    builderNames=builder_names_boot))

# Booting schedulers, split them per board and config because not every
# configuration of board/tree/defconfig will be booted or run tests.
# See: Matrix of configurations
c['schedulers'].append(schedulers.Triggerable(
    name='boot-odroid-u3-multi_v7',
    builderNames=['boot-odroid-u3-multi_v7']))
c['schedulers'].append(schedulers.Triggerable(
    name='boot-odroid-u3-exynos',
    builderNames=['boot-odroid-u3-exynos']))
c['schedulers'].append(schedulers.Triggerable(
    name='boot-odroid-xu-multi_v7',
    builderNames=['boot-odroid-xu-multi_v7']))
c['schedulers'].append(schedulers.Triggerable(
    name='boot-odroid-xu-exynos',
    builderNames=['boot-odroid-xu-exynos']))
c['schedulers'].append(schedulers.Triggerable(
    name='boot-odroid-xu3-multi_v7',
    builderNames=['boot-odroid-xu3-multi_v7']))
c['schedulers'].append(schedulers.Triggerable(
    name='boot-odroid-xu3-exynos',
    builderNames=['boot-odroid-xu3-exynos']))
c['schedulers'].append(schedulers.Triggerable(
    name='boot-odroid-hc1-multi_v7',
    builderNames=['boot-odroid-hc1-multi_v7']))
c['schedulers'].append(schedulers.Triggerable(
    name='boot-odroid-hc1-exynos',
    builderNames=['boot-odroid-hc1-exynos']))

####### STATUS TARGETS

c['status'] = []

#authz_cfg=authz.Authz(
#	auth = util.HTPasswdAprAuth('/home/buildbot/htpasswd'),
#	gracefulShutdown = 'auth',
#	forceBuild = 'auth',
#	forceAllBuilds = 'auth',
##	pingBuilder = 'auth',
#	pauseSlave = 'auth',
##	stopBuild = 'auth',
#	stopAllBuilds = 'auth',
#	cancelPendingBuild = 'auth',
#	cancelAllPendingBuilds = 'auth',
#	stopChange = 'auth',
#	cleanShutdown = 'auth',
#	showUsersPage = 'auth',
#)
authz = util.Authz(
    allowRules=[util.StopBuildEndpointMatcher(role='admins'),
                util.ForceBuildEndpointMatcher(role='admins'),
                util.RebuildBuildEndpointMatcher(role='admins'),
               ],
    roleMatchers=[util.RolesFromEmails(admins=['krzk@kernel.org'])]
)

c['www'] = { 'port': 8010,
             # pip install buildbot-waterfall-view buildbot-console-view
             'plugins': {'waterfall_view': {'num_builds': 50},
                         'console_view': {},
                         'grid_view': {},
                        },
             'authz': authz,
             # FIXME: not working
             #'auth': util.HTPasswdAuth('/home/buildbot/htpasswd'),
             'auth': util.UserPasswordAuth(master_auth_config['www-auth']),
}

mn = reporters.MailNotifier(fromaddr='kozik.server+dumbo.buildbot@gmail.com',
                            sendToInterestedUsers=False,
                            mode=['failing', 'problem', 'warnings', 'exception'],
                            relayhost='localhost',
                            extraRecipients=['k.kozlowski.k+buildbot@gmail.com'])
c['services'] = []
c['services'].append(mn)

####### SOME GLOBAL SETTINGS

####### PROJECT IDENTITY

c['title'] = 'Krzk Samsung-SoC'
c['titleURL'] = repo_krzk_web
c['buildbotURL'] = 'https://krzk.eu/'

####### DB URL

c['db'] = {
    #'db_url' : 'sqlite:///state.sqlite',
    'db_url': 'mysql://buildbot:' + master_auth_config['mysql-pass'] + '@localhost/buildbot',
}
