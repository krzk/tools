# -*- python -*-
# ex: set syntax=python:
#
# Copyright (c) 2016-2018 Krzysztof Kozlowski
# Author: Krzysztof Kozlowski <k.kozlowski.k@gmail.com>
#                             <krzk@kernel.org>
#
# SPDX-License-Identifier: GPL-2.0
#
# TODO:
# - Use consistent name for multi_v7 (builders, but this would clear the history)
# - Enable config options (like PWM FAN etc.) only when needed and respective to
#	to current config style (so don't switch exynos to 'm' or multi_v7 to 'y'...
#	and the best would be to enable it in a coherent way - 'm' for multi_v7 so
#	deferred probe won't complain)

# TODO: buildbotNetUsageData

####### REPO CONFIG

# Web-interface URL
buildbot_url = 'https://krzk.eu/'
repo_krzk_web = 'https://git.kernel.org/pub/scm/linux/kernel/git/krzk/linux.git'
projects = {}
projects['krzk'] = {
    'name': 'krzk',
    'branches': True,
    # GIT URL for master
    'repo_git': 'git://git.kernel.org/pub/scm/linux/kernel/git/krzk/linux.git',
    # HTTP URL for workers
    'repo_http': 'http://git.kernel.org/pub/scm/linux/kernel/git/krzk/linux.git',
    'polling': 60,
}

projects['krzk-pinctrl'] = {
    'name': 'krzk-pinctrl',
    'branches': True,
    'repo_git': 'git://git.kernel.org/pub/scm/linux/kernel/git/pinctrl/samsung.git',
    'repo_http': 'http://git.kernel.org/pub/scm/linux/kernel/git/pinctrl/samsung.git',
    'polling': 60,
}

projects['krzk-mem-ctrl'] = {
    'name': 'krzk-mem-ctrl',
    'branches': True,
    'repo_git': 'git://git.kernel.org/pub/scm/linux/kernel/git/krzk/linux-mem-ctrl.git',
    'repo_http': 'http://git.kernel.org/pub/scm/linux/kernel/git/krzk/linux-mem-ctrl.git',
    'polling': 60,
}

projects['mainline'] = {
    'name': 'mainline',
    'branches': ['master'],
    'repo_git': 'git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git',
    'repo_http': 'http://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git',
    'polling': 480,
}

projects['next'] = {
    'name': 'next',
    'branches': ['master', 'pending-fixes'],
    'repo_git': 'git://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next.git',
    'repo_http': 'http://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next.git',
    'polling': 480,
}

projects['stable'] = {
    'name': 'stable',
    'branches': ['linux-4.1.y', 'linux-4.4.y', 'linux-4.9.y',
                 'linux-4.13.y', 'linux-4.14.y', 'linux-4.15.y',
                 'linux-4.16.y', 'linux-4.17.y', 'linux-4.18.y',
                 'linux-4.19.y', 'linux-4.20.y', 'linux-5.0.y',
                 'linux-5.1.y', 'linux-5.2.y', 'linux-5.3.y',
                 'linux-5.4.y', 'linux-5.5.y', 'linux-5.6.y',
                 'linux-5.7.y', 'linux-5.8.y',
                ],
    'repo_git': 'git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git',
    'repo_http': 'http://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git',
    'polling': 480,
}

want_pm_tests = False

from master_auth import master_auth_config
from master_boot import steps_boot

####### GLOBALS

from buildbot.plugins import *
from buildbot.schedulers.forcesched import ChoiceStringParameter

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

c['collapseRequests'] = False
# FIXME: revlinks do not work. Neither in builders nor in console log.
c['revlink'] = util.RevlinkMatch([r'git://git.kernel.org/pub/scm/linux/kernel/git/([^/]*)/([^/]*)$'],
                                 r'https://git.kernel.org/pub/scm/linux/kernel/git/\1/\2/commit/?id=%s')

####### BUILDSLAVES

c['workers'] = [
    worker.Worker('cloud-tmp',
                  master_auth_config['cloud-worker-pass'], max_builds=1,
                  notify_on_missing=['k.kozlowski.k+buildbot@gmail.com'],
                  missing_timeout=60,
                  # Clear git_env to fix rebuilds (rebuilds of jobs
                  # previously executed by osbuilder were reusing
                  # osbuilder's git_env).
                  properties={'git_env': {}}),
    worker.Worker('dumbo-slave',
                  master_auth_config['dumbo-slave-pass'],
                  max_builds=1,
                  # Clear git_env to fix rebuilds (rebuilds of jobs
                  # previously executed by osbuilder were reusing
                  # osbuilder's git_env).
                  properties={'git_env': {}}),
    worker.Worker('elm-slave',
                  master_auth_config['elm-slave-pass'], max_builds=1,
                  notify_on_missing=['k.kozlowski.k+buildbot@gmail.com'],
                  missing_timeout=60,
                  properties={'git_env': {}}),
    worker.Worker('kozik-lap-slave',
                  master_auth_config['kozik-lap-slave-pass'], max_builds=1,
                  properties={'git_env': {}}),
    worker.Worker('pi-slave',
                  master_auth_config['pi-slave-pass'], max_builds=1,
                  properties={'git_env': {}}),
    worker.Worker('pi3-slave',
                  master_auth_config['pi3-slave-pass'], max_builds=1,
                  notify_on_missing=['k.kozlowski.k+buildbot@gmail.com'],
                  missing_timeout=60,
                  properties={'git_env': {}}),
]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

def get_gitpoller(project_name, workdir):
    return changes.GitPoller(
        projects[project_name]['repo_git'],
        project=projects[project_name]['name'],
        workdir=workdir,
        branches=projects[project_name]['branches'],
        pollAtLaunch=True,
        pollinterval=projects[project_name]['polling'])

c['change_source'] = []
# Cronjob for each gitpoller workdir
c['change_source'].append(get_gitpoller('krzk', 'gitpoller-workdir'))
c['change_source'].append(get_gitpoller('krzk-mem-ctrl', 'gitpoller-workdir-mem-ctrl'))
c['change_source'].append(get_gitpoller('krzk-pinctrl', 'gitpoller-workdir-pinctrl'))
c['change_source'].append(get_gitpoller('mainline', 'gitpoller-workdir-mainline'))
c['change_source'].append(get_gitpoller('next', 'gitpoller-workdir-next'))
c['change_source'].append(get_gitpoller('stable', 'gitpoller-workdir-stable'))

####### BUILDERS

# Builder names have to be defined before builders themself because
# some of configuring steps depend on them
builder_names_mainline = ['build-mainline-arm_exynos', 'build-mainline-arm_multi_v7']
builder_names_next = ['build-next-arm_exynos', 'build-next-arm_multi_v7']
builder_names_stable = ['build-stable-arm_exynos', 'build-stable-arm_multi_v7']
builder_names_krzk_check = ['build-checkpatch', 'build-dtbs']
# Builders scheduled for all krzk trees
builder_names_krzk = ['build-i386', 'build-x86_64', 'build-arm64', 'build-arm_def',
                      'build-arm_mini2440', 'build-arm_s3c2410', 'build-arm_s3c6400', 'build-arm_s5pv210',
                      'build-arm_tct_hammer', 'build-arm_exynos', 'build-arm_multi_v7']
builder_names_allyes = ['build-allyes-selected-i386', 'build-allyes-selected-x86_64',
                        'build-allyes-selected-arm64', 'build-allyes-selected-arm']
# Builders specific to mem-ctrl tree, scheduled only for changes in mem-ctrl
builder_names_krzk_mem_ctrl = ['build-memory-controllers-i386', 'build-memory-controllers-x86_64',
                               'build-memory-controllers-arm64', 'build-memory-controllers-arm']

# Static (executed during parsing of config) builder helpers
def builder_is_krzk_kernel(name):
    global builder_names_krzk
    global builder_names_allyes
    global builder_names_krzk_mem_ctrl
    if name in builder_names_krzk:
        return True
    if name in builder_names_krzk_mem_ctrl:
        return True
    if name in builder_names_allyes:
        return True
    return False

def builder_is_recent_kernel(name):
    # Next and mainline are recent
    if ('build-next' in name) or ('build-mainline' in name):
        return True
    # Builds from my tree are always recent
    if builder_is_krzk_kernel(name):
        return True
    # TODO: Test if stable is 4.15+?
    return False

def builder_is_krzk_static_cheker(name):
    return name in builder_names_krzk_check

def step_is_kernel_with_odroid_hc1(step):
    # Minimum kernel version for Odroid HC1: 4.19
    ver = step.getProperty('kernel_version')
    if (not ver) or (not len(ver)):
        return False
    vers = ver.split('.')
    if len(vers) < 2:
        return False
    ver_major = int(vers[0])
    ver_minor = int(vers[1])
    if (not ver_major) or (not ver_minor):
        return False
    if ver_major > 4:
        return True
    if (ver_major == 4) and (ver_minor >= 19):
        return True
    return False

def prioritize_builders(buildmaster, builders):
    """ Prioritize builders. Static checkers for krzk trees have
    the highest priority. Then krzk tree builders. Then the rest.
    Then prioritize ones with older job complete time.
    Then prioritize ones with older request time.

    Without the two last priorities, multiple jobs from one builder
    would be scheduled one by one. Instead round-robin is preferred.
    """
    global builder_names_krzk
    global builder_names_krzk_check
    global builder_names_krzk_mem_ctrl

    builders.sort(key=lambda b: (not builder_is_krzk_static_cheker(b.name),
                                 not builder_is_krzk_kernel(b.name),
                                 b.getNewestCompleteTime(),
                                 b.getOldestRequestTime()),
                  reverse=False)
    return builders

c['prioritizeBuilders'] = prioritize_builders

cmd_make = 'build-slave.sh'

def cmd_make_config(config=None):
    if config == None:
        config = 'defconfig'
    elif config in ['allyes', 'allmod', 'def']:
        config = config + 'config'
    else:
        config = str(config) + '_defconfig'
    return [cmd_make, config]

def steps_build_common(env, config=None):
    st = []
    step_name = str(config) + ' config' if config else 'defconfig'
    step_name = 'make ' + step_name
    st.append(steps.Git(repourl=util.Property('repository'),
                        # Run full/fresh checkout to get rid of any old DTBs or binaries from
                        # KBUILD_OUTPUT. For example when compiling stable kernel without
                        # given DTB, old DTB from linux-next might remain.
                        # Removal of them is necessary for boot tests so they do not re-use
                        # wrong binaries... and anyway it is nice to test clean build.
                        mode='full',
                        method='fresh',
                        haltOnFailure=True,
                        env=util.Property('git_env')))
    st.append(steps.SetPropertyFromCommand(command=[cmd_make, '-s', 'kernelversion'],
                                           property='kernel_version', haltOnFailure=True,
                                           env=env, name='Set property: kernel version'))
    st.append(steps.Compile(command=cmd_make_config(config),
                            haltOnFailure=True, env=env, name=step_name))
    return st

def steps_build_upload_artifacts(name, config, boot, out_dir):
    st = []
    masterdest_dir = 'bins-deploy/' + name + '/%(prop:revision)s/' + 'config'
    st.append(steps.FileUpload(workersrc=out_dir + u'.config',
                               masterdest=util.Interpolate(masterdest_dir),
                               mode=0o0644,
                               url=util.Interpolate(buildbot_url + 'pub/' + masterdest_dir),
                               haltOnFailure=True, name='Upload config'))

    masterdest_dir = 'bins-deploy/' + name + '/%(prop:revision)s/'
    if boot and config:
        upload_files_src_mandatory = ['arch/arm/boot/zImage',
                                      'arch/arm/boot/dts/exynos4412-odroidu3.dtb',
                                      'arch/arm/boot/dts/exynos4412-odroidx.dtb',
                                      'arch/arm/boot/dts/exynos5420-arndale-octa.dtb',
                                      'arch/arm/boot/dts/exynos5422-odroidxu3-lite.dtb',
                                      'modules-out.tar.gz',
                                      ]
        upload_files_src_mandatory = [(out_dir + i) for i in upload_files_src_mandatory]
        st.append(steps.MultipleFileUpload(workersrcs=upload_files_src_mandatory,
                                           masterdest=util.Interpolate(masterdest_dir),
                                           mode=0o0644,
                                           url=util.Interpolate(buildbot_url + 'pub/' + masterdest_dir),
                                           haltOnFailure=True,
                                           name='Upload kernel, modules and required DTBs'))

        # XU, XU4 and HC1 might be missing for older kernels -  In case of failure do not halt,
        # do not fail and mark build as warning. flunkOnFailure is by default True.
        upload_files_src_optional = ['arch/arm/boot/dts/exynos5410-odroidxu.dtb',
                                     'arch/arm/boot/dts/exynos5422-odroidhc1.dtb',
                                     'arch/arm/boot/dts/exynos5422-odroidxu4.dtb',
                                     ]
        upload_files_src_optional = [(out_dir + i) for i in upload_files_src_optional]
        st.append(steps.MultipleFileUpload(workersrcs=upload_files_src_optional,
                                           masterdest=util.Interpolate(masterdest_dir),
                                           mode=0o0644,
                                           url=util.Interpolate(buildbot_url + 'pub/' + masterdest_dir),
                                           haltOnFailure=False, warnOnFailure=True, flunkOnFailure=False,
                                           name='Upload optional DTBs'))
    st.append(steps.MasterShellCommand(command=['chmod', 'a+rx', 'bins-deploy/' + name, util.Interpolate(masterdest_dir)],
                                       name='Set world-readable permissions on uploaded files for web server'))

    return st

# Trigger booting (and maybe tests from boot-builder).
# Not every configuration of board/tree/defconfig will be booted
# or run tests.
#
# Matrix of configurations:
#
# board \ tree | krzk   | next | mainline | stable |
# Octa         |        |      |          |        |
# MC1          |        |      |          |        |
# HC1          | EtT,M  | EtT  | EtT      | Et     |
# U3           |        |      |          |        |
# X            |        |      |          |        |
# XU           |        |      |          |        |
#
# Legens:
# E: exynos_defconfig
# M: multi_v7_defconfig
# t: run simple tests (on chosen defconfig)
# T: run full test suite (on chosen defconfig)
def steps_build_boot_trigger(name, config, env):
    st = []
    # Boot Arndale Octa, U3 and HC1 on:
    #  - exynos_defconfig - always
    #  - multi_v7_defconfig - only krzk tree
    # See: Matrix of configurations
    boot_exynos_or_krzk = config == 'exynos' or builder_is_krzk_kernel(name)
    st.append(steps.Trigger(
        schedulerNames=['boot-odroid-hc1-' + config],
        name='Boot Odroid HC1',
        set_properties={'trigger_builder': name},
        doStepIf=lambda step: boot_exynos_or_krzk and step_is_kernel_with_odroid_hc1(step)))
    return st

f_env = {
    'i386': {'ARCH': 'i386'},
    'x86_64': {'ARCH': 'x86_64'},
    'arm': {'ARCH': 'arm'},
    'arm64': {'ARCH': 'arm64'},
}
for key in f_env:
    f_env[key]['KBUILD_OUTPUT'] = 'out/'
    f_env[key]['PATH'] = '/opt/tools/buildbot:/opt/tools/linux:/usr/local/bin:${PATH}'

def steps_build_boot_adjust_config(builder_name, env, slaves, config):
    st = []
    if not config:
        raise ValueError('Missing config for booting')
    if not env['KBUILD_OUTPUT']:
        raise ValueError('Missing KBUILD_OUTPUT path in environment')
    st.append(steps.ShellCommand(
        command=['scripts/config', '--file', env['KBUILD_OUTPUT'] + '.config',
                 # Enable IPV6 for Odroid systemd, AUTOFS4_FS/NFS_V4 will be in exynos_defconfig around v4.5
                 '-e', 'IPV6', '-e', 'NFS_V4', '-e', 'AUTOFS4_FS',
                 # Enable fan so it won't be spinning on full speed on multi_v7
                 # (PWM_FAN will be in multi_v7 around v4.5-4.6 but both
                 # won't be in older stables)
                 '-e', 'SENSORS_PWM_FAN', '-e', 'PWM_SAMSUNG',
                 # s5p-sss tests need status of selftest
                 '-d', 'CRYPTO_MANAGER_DISABLE_TESTS',
                 # Want DMATEST and TCRYPT for tests
                 '-e', 'DMATEST', '-m', 'CRYPTO_TEST',
                 # Enable Lockdep and other debugging non-heavy tools
                 '-e', 'SCHED_STACK_END_CHECK', '-e', 'DEBUG_LOCK_ALLOC',
                 '-e', 'DEBUG_ATOMIC_SLEEP', '-e', 'DEBUG_LIST',
                 # Enable build-time debugging
                 '-e', 'DEBUG_SECTION_MISMATCH',
                 # SECCOMP is required by newer Arch ARM systemd
                 '-e', 'SECCOMP',
                ],
        haltOnFailure=True,
        env=env, name='Toggle config options'))
    st.append(steps.Compile(command=[cmd_make, 'olddefconfig'],
                            haltOnFailure=True,
                            env=env, name='Make olddefconfig'))
    return st

def steps_build_mem_ctrl_adjust_config(builder_name, env):
    st = []
    if not env['KBUILD_OUTPUT']:
        raise ValueError('Missing KBUILD_OUTPUT path in environment')
    st.append(steps.ShellCommand(
        command=['scripts/config', '--file', env['KBUILD_OUTPUT'] + '.config',
                 '-e', 'COMPILE_TEST', '-e', 'OF',
                 '-e', 'SRAM', '-e', 'MEMORY', '-e', 'PM_DEVFREQ',
                 '-e', 'ARM_PL172_MPMC',
                 '-e', 'ATMEL_SDRAMC', '-e', 'ATMEL_EBI',
                 '-e', 'BRCMSTB_DPFE', '-e', 'BT1_L2_CTL',
                 '-e', 'TI_AEMIF', '-e', 'TI_EMIF', '-e', 'OMAP_GPMC',
                 '-e', 'TI_EMIF_SRAM', '-e', 'MVEBU_DEVBUS', '-e', 'FSL_CORENET_CF',
                 '-e', 'FSL_IFC', '-e', 'JZ4780_NEMC', '-e', 'MTK_SMI',
                 '-e', 'DA8XX_DDRCTL', '-e', 'PL353_SMC', '-e', 'RENESAS_RPCIF',
                 '-e', 'STM32_FMC2_EBI', '-e', 'SAMSUNG_MC', '-e', 'EXYNOS5422_DMC',
                 '-e', 'EXYNOS_SROM', '-e', 'TEGRA_MC', '-e', 'TEGRA20_EMC',
                 '-e', 'TEGRA30_EMC', '-e', 'TEGRA124_EMC', '-e', 'TEGRA210_EMC_TABLE',
                 '-e', 'TEGRA210_EMC',
                ],
        haltOnFailure=True,
        env=env, name='Toggle memory controller drivers compile test config options'))
    st.append(steps.Compile(command=[cmd_make, 'olddefconfig'],
                            haltOnFailure=True,
                            env=env, name='Make olddefconfig'))
    return st

def steps_build_selected_folders(builder_name, env):
    st = []
    if not env['KBUILD_OUTPUT']:
        raise ValueError('Missing KBUILD_OUTPUT path in environment')
    st.append(steps.Compile(command=[cmd_make, 'arch/arm/',
                                     # make won't build DTBs but include it for completeness
                                     'arch/arm64/boot/dts/',
                                     'drivers/clk/samsung/', 'drivers/pinctrl/samsung/', 'drivers/memory/',
                                     'drivers/soc/samsung/'],
                            haltOnFailure=True, env=env, name='Build selected paths'))
    return st

def get_builder(builder_name, env, slaves, config=None, boot=False, steps_config=None, steps_compile=None):
    f = util.BuildFactory()
    f.addSteps(steps_build_common(env, config))
    if steps_config:
            f.addSteps(steps_config(builder_name, env))

    if steps_compile:
        f.addSteps(steps_compile(builder_name, env))
    else:
        f.addStep(steps.Compile(command=[cmd_make], haltOnFailure=True, env=env, name='Build kernel'))
    if boot and config:
        f.addSteps(steps_build_boot_adjust_config(builder_name, env, slaves, config))
        f.addStep(steps.Compile(command=[cmd_make], haltOnFailure=True, env=env, name='Build kernel (with booting addons)'))
        f.addStep(steps.Compile(command=['build-slave-package.sh', builder_name, env['KBUILD_OUTPUT']],
                                haltOnFailure=True, env=env, name='Package for booting'))
    f.addSteps(steps_build_upload_artifacts(builder_name, config, boot, env['KBUILD_OUTPUT']))
    if boot and config:
        f.addSteps(steps_build_boot_trigger(builder_name, config, env))
    return util.BuilderConfig(name=builder_name,
                              workernames=slaves,
                              workerbuilddir='builddir',
                              factory=f)

def get_checkpatch_builder(builder_name, env, slaves, config=None):
    f = util.BuildFactory()
    f.addSteps(steps_build_common(env, config))
    f.addStep(steps.Git(repourl=projects['mainline']['repo_git'],
                        name='git clone of reference Linux repository',
                        mode='full',
                        method='fresh',
                        haltOnFailure=True,
                        workdir='build_linux_ref',
                        branch='master',
                        alwaysUseLatest=True,
                        # Use objects from already cloned repo
                        reference='../build',
                        env=util.Property('git_env')))
    f.addStep(steps.ShellCommand(command=['scripts/checkpatch.pl', '-g', util.Property('revision')],
                                 haltOnFailure=False, env=env, name='Run checkpatch on commit'))
    f.addStep(steps.ShellCommand(command=['verify_signedoff.sh',
                                          util.Interpolate('%(prop:revision)s^..%(prop:revision)s')],
                                 haltOnFailure=False, env=env, name='Run verify_signedoff on commit'))
    f.addStep(steps.ShellCommand(command=['verify_fixes.sh', '../build_linux_ref',
                                          util.Interpolate('%(prop:revision)s^..%(prop:revision)s')],
                                 haltOnFailure=False, env=env, name='Run verify_fixes on commit'))
    return util.BuilderConfig(name=builder_name,
                              workernames=slaves,
                              workerbuilddir='builddir',
                              factory=f)

def steps_checkdtbs(env, config=None, git_reset=True):
    st = []
    if git_reset:
        st += steps_build_common(env, config)
    step_name = str(config) + ' config' if config else 'defconfig'
    step_name = 'make dtbs with warnings for ' + env['ARCH'] + '/' + step_name
    st.append(steps.Compile(command=[cmd_make, 'dtbs', 'W=1'],
                            haltOnFailure=True,
                            env=env, name=step_name))
    return st

def get_checkdtbs_builder(builder_name, slaves):
    f = util.BuildFactory()
    f.addSteps(steps_checkdtbs(f_env['arm'], 'exynos'))
    f.addSteps(steps_checkdtbs(f_env['arm'], 's3c2410'))
    f.addSteps(steps_checkdtbs(f_env['arm'], 's3c6400'))
    f.addSteps(steps_checkdtbs(f_env['arm'], 's5pv210'))
    f.addSteps(steps_checkdtbs(f_env['arm64']))
    # Re-touch Exynos DTS to get only Exynos-specific warnings.
    # Run in /bin/sh so wildcard will work.
    f.addStep(steps.ShellCommand(command=['/bin/sh', '-c', 'touch arch/arm64/boot/dts/exynos/*'],
                                 haltOnFailure=True,
                                 env=f_env['arm64'], name='touch again Exynos ARM64 DTS'))
    f.addSteps(steps_checkdtbs(f_env['arm64'], git_reset=False))
    return util.BuilderConfig(name=builder_name,
                              workernames=slaves,
                              workerbuilddir='builddir',
                              factory=f)

slave_all = ['cloud-tmp', 'dumbo-slave', 'elm-slave', 'kozik-lap-slave']
slave_arm = list(slave_all)
slave_boot = ['pi3-slave']

c['builders'] = []
c['builders'].append(get_builder('build-i386', f_env['i386'], slave_all))
c['builders'].append(get_builder('build-x86_64', f_env['x86_64'], slave_all))
c['builders'].append(get_builder('build-arm64', f_env['arm64'], slave_all))
c['builders'].append(get_builder('build-arm_def', f_env['arm'], slave_arm))
c['builders'].append(get_builder('build-arm_mini2440', f_env['arm'], slave_arm, config='mini2440'))
c['builders'].append(get_builder('build-arm_s3c2410', f_env['arm'], slave_arm, config='s3c2410'))
c['builders'].append(get_builder('build-arm_s3c6400', f_env['arm'], slave_arm, config='s3c6400'))
c['builders'].append(get_builder('build-arm_s5pv210', f_env['arm'], slave_arm, config='s5pv210'))
c['builders'].append(get_builder('build-arm_tct_hammer', f_env['arm'], slave_arm, config='tct_hammer'))
c['builders'].append(get_builder('build-arm_exynos', f_env['arm'], slave_arm, config='exynos', boot=True))
c['builders'].append(get_builder('build-arm_multi_v7', f_env['arm'], slave_arm, config='multi_v7', boot=True))

c['builders'].append(get_builder('build-memory-controllers-i386', f_env['i386'], slave_all,
                                 steps_config=steps_build_mem_ctrl_adjust_config))
c['builders'].append(get_builder('build-memory-controllers-x86_64', f_env['x86_64'], slave_all,
                                 steps_config=steps_build_mem_ctrl_adjust_config))
c['builders'].append(get_builder('build-memory-controllers-arm64', f_env['arm64'], slave_all,
                                 steps_config=steps_build_mem_ctrl_adjust_config))
c['builders'].append(get_builder('build-memory-controllers-arm', f_env['arm'], slave_arm,
                                 steps_config=steps_build_mem_ctrl_adjust_config))

c['builders'].append(get_builder('build-allyes-selected-i386', f_env['i386'], slave_all, config='allyes',
                                 steps_config=steps_build_mem_ctrl_adjust_config,
                                 steps_compile=steps_build_selected_folders))
c['builders'].append(get_builder('build-allyes-selected-x86_64', f_env['x86_64'], slave_all, config='allyes',
                                 steps_config=steps_build_mem_ctrl_adjust_config,
                                 steps_compile=steps_build_selected_folders))
c['builders'].append(get_builder('build-allyes-selected-arm64', f_env['arm64'], slave_all, config='allyes',
                                 steps_config=steps_build_mem_ctrl_adjust_config,
                                 steps_compile=steps_build_selected_folders))
c['builders'].append(get_builder('build-allyes-selected-arm', f_env['arm'], slave_arm, config='allyes',
                                 steps_config=steps_build_mem_ctrl_adjust_config,
                                 steps_compile=steps_build_selected_folders))

# After getting names for builder_names_krzk, builders for other:
# TODO: Smarter way of generation builders and schedulers
# TODO: The builders will use same builddirs on slaves as for krzk repo which will
#		cause huge rebuild (especially after next change).
#		Maybe separate directory for repos? This could speed up building in case of multiple
#		jobs coming from repos in same time.
#		But will that help? Still the repo resides in builddir's parent and revision has to
#		to be checked out so all sources will change?
# Builder build-checkpatch is not really part of regular krzk builders because it skips master branch
c['builders'].append(get_checkpatch_builder('build-checkpatch', f_env['arm'], slave_all))
c['builders'].append(get_checkdtbs_builder('build-dtbs', slave_arm))
c['builders'].append(get_builder('build-mainline-arm_exynos', f_env['arm'], slave_arm, config='exynos', boot=True))
c['builders'].append(get_builder('build-mainline-arm_multi_v7', f_env['arm'], slave_arm, config='multi_v7'))
c['builders'].append(get_builder('build-next-arm_exynos', f_env['arm'], slave_arm, config='exynos', boot=True))
c['builders'].append(get_builder('build-next-arm_multi_v7', f_env['arm'], slave_arm, config='multi_v7'))
# Stable only with Exynos because multi_v7 could lack a lot of stuff for Odroid
c['builders'].append(get_builder('build-stable-arm_exynos', f_env['arm'], slave_arm, config='exynos', boot=True))
c['builders'].append(get_builder('build-stable-arm_multi_v7', f_env['arm'], slave_arm, config='multi_v7'))

builder_names_build = []
for builder in c['builders']:
    builder_names_build.append(str(builder.name))

# Boot/Deployers
def get_boot_builder(builder_name, target, config):
    f = util.BuildFactory()
    f.addSteps(steps_boot(builder_name, target, config))
    return util.BuilderConfig(name=builder_name,
                              workernames=slave_boot,
                              workerbuilddir='builddir',
                              factory=f)

c['builders'].append(get_boot_builder('boot-arndale-octa-multi_v7', 'arndaleocta', 'multi_v7'))
c['builders'].append(get_boot_builder('boot-arndale-octa-exynos', 'arndaleocta', 'exynos'))
c['builders'].append(get_boot_builder('boot-odroid-hc1-multi_v7', 'odroidhc1', 'multi_v7'))
c['builders'].append(get_boot_builder('boot-odroid-hc1-exynos', 'odroidhc1', 'exynos'))
c['builders'].append(get_boot_builder('boot-odroid-mc1-multi_v7', 'odroidmc1', 'multi_v7'))
c['builders'].append(get_boot_builder('boot-odroid-mc1-exynos', 'odroidmc1', 'exynos'))
c['builders'].append(get_boot_builder('boot-odroid-u3-multi_v7', 'odroidu3', 'multi_v7'))
c['builders'].append(get_boot_builder('boot-odroid-u3-exynos', 'odroidu3', 'exynos'))
c['builders'].append(get_boot_builder('boot-odroid-x-multi_v7', 'odroidx', 'multi_v7'))
c['builders'].append(get_boot_builder('boot-odroid-x-exynos', 'odroidx', 'exynos'))
c['builders'].append(get_boot_builder('boot-odroid-xu-multi_v7', 'odroidxu', 'multi_v7'))
c['builders'].append(get_boot_builder('boot-odroid-xu-exynos', 'odroidxu', 'exynos'))

builder_names_boot = ['boot-arndale-octa-multi_v7', 'boot-arndale-octa-exynos',
                      'boot-odroid-hc1-multi_v7', 'boot-odroid-hc1-exynos',
                      'boot-odroid-mc1-multi_v7', 'boot-odroid-mc1-exynos',
                      'boot-odroid-u3-multi_v7', 'boot-odroid-u3-exynos',
                      'boot-odroid-x-multi_v7', 'boot-odroid-x-exynos',
                      'boot-odroid-xu-multi_v7', 'boot-odroid-xu-exynos']

####### SCHEDULERS

# Building schedulers
import re

author_krzk = 'kozlowski'
# Change instance: Change(revision=u'', who=u'', branch=u'', comments=u'', when=, category=None, project=u'', repository=REPO, codebase=u'')
def change_commit_is_krzk(change):
    if re.search(author_krzk, change.who, flags=re.IGNORECASE):
        return True
    if re.search(author_krzk, change.comments, flags=re.IGNORECASE):
        return True
    return False

# Change instance: Change(revision=u'', who=u'', branch=u'', comments=u'', when=, category=None, project=u'', repository=REPO, codebase=u'')
# During merge window, Linus' tree is being built many times per day. Needlessly.
def change_commit_is_release(change):
    if re.search('^Linux [0-9]\.[0-9]{1,2}(-rc[1-9][0-9]?)?$', change.comments):
        print("Matched commit for release: " + str(change.comments))
        return True
    return False

def branch_krzk(branch):
    return branch not in ['master', '__about_repo__']

# treeStableTimer=None, for building each commit
c['schedulers'] = []
for project in ('krzk', 'krzk-mem-ctrl', 'krzk-pinctrl'):
    if project == 'krzk-mem-ctrl':
        scheduler_builders = builder_names_allyes + builder_names_krzk_mem_ctrl
    else:
        scheduler_builders = builder_names_krzk + builder_names_allyes
    c['schedulers'].append(schedulers.AnyBranchScheduler(
        name=projects[project]['name'],
        treeStableTimer=None,
        fileIsImportant=change_commit_is_krzk,
        change_filter=util.ChangeFilter(project=projects[project]['name'],
                                        branch_fn=branch_krzk),
        builderNames=scheduler_builders + builder_names_krzk_check))
    c['schedulers'].append(schedulers.SingleBranchScheduler(
        name=projects[project]['name'] + '-master',
        treeStableTimer=(projects[project]['polling'] + 30), # Poller + slack
        change_filter=util.ChangeFilter(project=projects[project]['name'],
                                        branch='master'),
        builderNames=scheduler_builders))

c['schedulers'].append(schedulers.SingleBranchScheduler(
    name=projects['mainline']['name'],
    fileIsImportant=change_commit_is_release,
    treeStableTimer=(2*projects[project]['polling'] + 30), # 2*Poller + slack
    change_filter=util.ChangeFilter(project=projects['mainline']['name'],
                                    branch=projects['mainline']['branches'][0]),
    builderNames=builder_names_mainline))
c['schedulers'].append(schedulers.AnyBranchScheduler(
    name=projects['next']['name'],
    treeStableTimer=(2*projects[project]['polling'] + 30), # 2*Poller + slack
    change_filter=util.ChangeFilter(project=projects['next']['name']),
    builderNames=builder_names_next))
c['schedulers'].append(schedulers.AnyBranchScheduler(
    name=projects['stable']['name'],
    treeStableTimer=(2*projects[project]['polling'] + 30), # 2*Poller + slack
    change_filter=util.ChangeFilter(project=projects['stable']['name']),
    builderNames=builder_names_stable))

c['schedulers'].append(schedulers.ForceScheduler(
    name='force-' + projects['krzk']['name'],
    label='Force build',
    builderNames=builder_names_krzk + builder_names_allyes + builder_names_krzk_mem_ctrl + builder_names_krzk_check,
    codebases=[
        util.CodebaseParameter(
            name=projects['krzk']['name'],
            codebase='',
            project=util.StringParameter(name='project', default=projects['krzk']['name']),
            repository=ChoiceStringParameter(
                name='repository',
                label='Repository',
                choices=[projects['krzk']['repo_git'],
                         projects['krzk-mem-ctrl']['repo_git'],
                         projects['krzk-pinctrl']['repo_git'],
                        ],
                default=projects['krzk']['repo_git'],
                # Autopopulate does not work for codebase (as of v1.3.0)
                # autopopulate={
                #     # Choose automatically appropriate project for given repo
                #     projects['krzk']['repo_git']: {
                #         'project': projects['krzk']['name'],
                #     },
                #     projects['krzk-pinctrl']['repo_git']: {
                #         'project': projects['krzk-pinctrl']['name'],
                #     },
                # },
                strict=True),
            branch=util.StringParameter(name='branch', default='master'),
            revision=util.StringParameter(name='revision', default=''),
        ),
    ],
    ))
c['schedulers'].append(schedulers.ForceScheduler(
    name='force-' + projects['mainline']['name'],
    builderNames=builder_names_mainline,
    codebases=[
        util.CodebaseParameter(
            name=projects['mainline']['name'],
            codebase='',
            project=util.FixedParameter(name='project', default=projects['mainline']['name']),
            repository=util.FixedParameter(name='repository', default=projects['mainline']['repo_git']),
            branch=util.StringParameter(name='branch', default='master'),
            revision=util.StringParameter(name='revision', default=''),
        ),
    ]))
c['schedulers'].append(schedulers.ForceScheduler(
    name='force-' + projects['next']['name'],
    builderNames=builder_names_next,
    codebases=[
        util.CodebaseParameter(
            name=projects['next']['name'],
            codebase='',
            project=util.FixedParameter(name='project', default=projects['next']['name']),
            repository=util.FixedParameter(name='repository', default=projects['next']['repo_git']),
            branch=util.StringParameter(name='branch', default='master'),
            revision=util.StringParameter(name='revision', default=''),
        ),
    ]))
c['schedulers'].append(schedulers.ForceScheduler(
    name='force-' + projects['stable']['name'],
    builderNames=builder_names_stable,
    codebases=[
        util.CodebaseParameter(
            name=projects['stable']['name'],
            codebase='',
            project=util.FixedParameter(name='project', default=projects['stable']['name']),
            repository=util.FixedParameter(name='repository', default=projects['stable']['repo_git']),
            branch=ChoiceStringParameter(
                name='branch',
                label='Branch',
                choices=projects['stable']['branches'],
                default=projects['stable']['branches'][0],
                strict=False),
            revision=util.StringParameter(name='revision', default=''),
        ),
    ]))
c['schedulers'].append(schedulers.ForceScheduler(
    name='force-boot',
    properties=[ChoiceStringParameter(name='trigger_builder',
                                      label='Trigger builder',
                                      choices=['build-arm_exynos',
                                               'build-arm_multi_v7'] +
                                               builder_names_mainline +
                                               builder_names_next +
                                               builder_names_stable,
                                      default='build-arm_exynos',
                                      strict=True)],
    codebases=[
        util.CodebaseParameter(
            codebase='force-boot-codebase',
            label='Changesource information',
            project=util.FixedParameter(name='project', default='', label='ignored'),
            repository=util.FixedParameter(name='repository', default='', label='ignored'),
            branch=util.FixedParameter(name='branch', default='', label='ignored'),
            revision=util.StringParameter(name='revision', default=''),
        ),
    ],
    builderNames=builder_names_boot))

# Booting schedulers, split them per board and config because not every
# configuration of board/tree/defconfig will be booted or run tests.
# See: Matrix of configurations
c['schedulers'].append(schedulers.Triggerable(
    name='boot-arndale-octa-multi_v7',
    builderNames=['boot-arndale-octa-multi_v7']))
c['schedulers'].append(schedulers.Triggerable(
    name='boot-arndale-octa-exynos',
    builderNames=['boot-arndale-octa-exynos']))

c['schedulers'].append(schedulers.Triggerable(
    name='boot-odroid-hc1-multi_v7',
    builderNames=['boot-odroid-hc1-multi_v7']))
c['schedulers'].append(schedulers.Triggerable(
    name='boot-odroid-hc1-exynos',
    builderNames=['boot-odroid-hc1-exynos']))

c['schedulers'].append(schedulers.Triggerable(
    name='boot-odroid-mc1-multi_v7',
    builderNames=['boot-odroid-mc1-multi_v7']))
c['schedulers'].append(schedulers.Triggerable(
    name='boot-odroid-mc1-exynos',
    builderNames=['boot-odroid-mc1-exynos']))

c['schedulers'].append(schedulers.Triggerable(
    name='boot-odroid-u3-multi_v7',
    builderNames=['boot-odroid-u3-multi_v7']))
c['schedulers'].append(schedulers.Triggerable(
    name='boot-odroid-u3-exynos',
    builderNames=['boot-odroid-u3-exynos']))

c['schedulers'].append(schedulers.Triggerable(
    name='boot-odroid-x-multi_v7',
    builderNames=['boot-odroid-x-multi_v7']))
c['schedulers'].append(schedulers.Triggerable(
    name='boot-odroid-x-exynos',
    builderNames=['boot-odroid-x-exynos']))

c['schedulers'].append(schedulers.Triggerable(
    name='boot-odroid-xu-multi_v7',
    builderNames=['boot-odroid-xu-multi_v7']))
c['schedulers'].append(schedulers.Triggerable(
    name='boot-odroid-xu-exynos',
    builderNames=['boot-odroid-xu-exynos']))

####### STATUS TARGETS

c['status'] = []

#authz_cfg=authz.Authz(
#	auth = util.HTPasswdAprAuth('/home/buildbot/htpasswd'),
#	gracefulShutdown = 'auth',
#	forceBuild = 'auth',
#	forceAllBuilds = 'auth',
##	pingBuilder = 'auth',
#	pauseSlave = 'auth',
##	stopBuild = 'auth',
#	stopAllBuilds = 'auth',
#	cancelPendingBuild = 'auth',
#	cancelAllPendingBuilds = 'auth',
#	stopChange = 'auth',
#	cleanShutdown = 'auth',
#	showUsersPage = 'auth',
#)
authz = util.Authz(
    allowRules=[util.StopBuildEndpointMatcher(role='admins'),
                util.ForceBuildEndpointMatcher(role='admins'),
                util.RebuildBuildEndpointMatcher(role='admins'),
               ],
    roleMatchers=[util.RolesFromEmails(admins=['krzk@kernel.org'])]
)

c['www'] = { 'port': 8010,
             # pip install buildbot-waterfall-view buildbot-console-view
             'plugins': {'waterfall_view': {'num_builds': 50},
                         'console_view': {},
                         'grid_view': {},
                        },
             'authz': authz,
             # FIXME: not working
             #'auth': util.HTPasswdAuth('/home/buildbot/htpasswd'),
             'auth': util.UserPasswordAuth(master_auth_config['www-auth']),
             'custom_templates_dir' : 'www-templates',
}

mn = reporters.MailNotifier(fromaddr='kozik.server+dumbo.buildbot@gmail.com',
                            sendToInterestedUsers=False,
                            mode=['failing', 'problem', 'warnings', 'exception'],
                            relayhost='localhost',
                            extraRecipients=['k.kozlowski.k+buildbot@gmail.com'])
c['services'] = []
c['services'].append(mn)

####### SOME GLOBAL SETTINGS

####### PROJECT IDENTITY

c['title'] = 'Krzk Samsung SoC'
c['titleURL'] = repo_krzk_web
c['buildbotURL'] = buildbot_url

####### DB URL

c['db'] = {
    #'db_url' : 'sqlite:///state.sqlite',
    'db_url': 'mysql://buildbot:' + master_auth_config['mysql-pass'] + '@localhost/buildbot',
}
