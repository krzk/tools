# -*- python -*-
# ex: set syntax=python:
#
# Copyright (c) 2016-2025 Krzysztof Kozlowski
# Author: Krzysztof Kozlowski <k.kozlowski.k@gmail.com>
#                             <krzk@kernel.org>
#
# SPDX-License-Identifier: GPL-2.0
#
# TODO:
# - Use consistent name for multi_v7 (builders, but this would clear the history)
# - Enable config options (like PWM FAN etc.) only when needed and respective to
#	to current config style (so don't switch exynos to 'm' or multi_v7 to 'y'...
#	and the best would be to enable it in a coherent way - 'm' for multi_v7 so
#	deferred probe won't complain)

# TODO: buildbotNetUsageData

####### REPO CONFIG

# Web-interface URL
buildbot_url = 'https://krzk.eu/'
repo_krzk_web = 'https://git.kernel.org/pub/scm/linux/kernel/git/krzk/linux.git'
projects = {}

# Any new repo needs also updating grokmirror on master and workers (see Ansible and mirror_repos_korg)
projects['krzk-yocto'] = {
    'name': 'krzk-yocto',
    'branches': ['master'],
    'repo_git_poller': 'https://github.com/krzk/yocto-upstream.git',
    'repo_git_worker': 'https://github.com/krzk/yocto-upstream.git',
    'polling': 480,
    'worker_dir': 'yocto',
}

projects['krzk'] = {
    'name': 'krzk',
    'branches': True,
    # GIT URL for master (GitPoller). Will be passed to workers in builds.
    'repo_git_poller': 'file:///var/lib/mirror/pub/scm/linux/kernel/git/krzk/linux.git',
    # GIT URL (publicly accessible) for storing artifacts.
    'repo_git_worker': 'git://git.kernel.org/pub/scm/linux/kernel/git/krzk/linux.git',
    'polling': 60,
    'worker_dir': 'kernel',
}

projects['krzk-pinctrl'] = {
    'name': 'krzk-pinctrl',
    'branches': True,
    'repo_git_poller': 'file:///var/lib/mirror/pub/scm/linux/kernel/git/pinctrl/samsung.git',
    'repo_git_worker': 'git://git.kernel.org/pub/scm/linux/kernel/git/pinctrl/samsung.git',
    'polling': 60,
    'worker_dir': 'kernel',
}

projects['krzk-dt'] = {
    'name': 'krzk-dt',
    'branches': True,
    'repo_git_poller': 'file:///var/lib/mirror/pub/scm/linux/kernel/git/krzk/linux-dt.git',
    'repo_git_worker': 'git://git.kernel.org/pub/scm/linux/kernel/git/krzk/linux-dt.git',
    'polling': 60,
    'worker_dir': 'kernel',
}

projects['krzk-mem-ctrl'] = {
    'name': 'krzk-mem-ctrl',
    'branches': True,
    'repo_git_poller': 'file:///var/lib/mirror/pub/scm/linux/kernel/git/krzk/linux-mem-ctrl.git',
    'repo_git_worker': 'git://git.kernel.org/pub/scm/linux/kernel/git/krzk/linux-mem-ctrl.git',
    'polling': 60,
    'worker_dir': 'kernel',
}

projects['krzk-w1'] = {
    'name': 'krzk-w1',
    'branches': True,
    'repo_git_poller': 'file:///var/lib/mirror/pub/scm/linux/kernel/git/krzk/linux-w1.git',
    'repo_git_worker': 'git://git.kernel.org/pub/scm/linux/kernel/git/krzk/linux-w1.git',
    'polling': 60,
    'worker_dir': 'kernel',
}

projects['mainline'] = {
    'name': 'mainline',
    'branches': ['master'],
    'repo_git_poller': 'file:///var/lib/mirror/pub/scm/linux/kernel/git/torvalds/linux.git',
    'repo_git_worker': 'git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git',
    'polling': 480,
    'worker_dir': 'kernel',
}

projects['next'] = {
    'name': 'next',
    'branches': ['master', 'pending-fixes'],
    'repo_git_poller': 'file:///var/lib/mirror/pub/scm/linux/kernel/git/next/linux-next.git',
    'repo_git_worker': 'git://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next.git',
    'polling': 480,
    'worker_dir': 'kernel',
}

projects['stable'] = {
    'name': 'stable',
    'branches': ['linux-rolling-lts', 'linux-rolling-stable',
                 'linux-4.19.y',
                 'linux-5.4.y', 'linux-5.10.y',  'linux-5.15.y',
                 'linux-6.1.y', 'linux-6.6.y',
                 'linux-6.8.y', 'linux-6.9.y', 'linux-6.10.y',
                 'linux-6.11.y', 'linux-6.12.y', 'linux-6.13.y',
                 'linux-6.14.y', 'linux-6.15.y', 'linux-6.16.y',
                ],
    'repo_git_poller': 'file:///var/lib/mirror/pub/scm/linux/kernel/git/stable/linux.git',
    'repo_git_worker': 'git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git',
    'polling': 480,
    'worker_dir': 'kernel',
}

want_pm_tests = False

from master_auth import master_auth_config
from master_boot import steps_boot
from master_build_common import steps_build_clean, step_make_config, steps_build_common, \
                                steps_build_upload_artifacts, \
                                steps_build_linux_kernel, \
                                steps_build_arm_var_multi_v4_v5_adjust_config, \
                                steps_build_arm_var_multi_v6_v7_adjust_config, \
                                steps_build_mem_ctrl_adjust_config, \
                                steps_build_w1_adjust_config, steps_build_all_drivers_adjust_config, \
                                steps_build_selected_folders, steps_dt_binding_check, steps_dtbs_check, \
                                steps_dtbs_check_boards, \
                                steps_dtbs_warnings, steps_build_with_warnings_diff, \
                                DTBS_CHECK_BOARDS
from master_build_samsung import steps_build_upload_artifacts_binaries, steps_build_boot_adjust_config
from master_yocto import steps_yocto_builder

####### GLOBALS

from buildbot.plugins import *
from buildbot.schedulers.forcesched import ChoiceStringParameter

from datetime import datetime
from dateutil.tz import tzutc
from twisted.internet import defer

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

c['collapseRequests'] = False
# FIXME: revlinks do not work. Neither in builders nor in console log.
c['revlink'] = util.RevlinkMatch([r'git://git.kernel.org/pub/scm/linux/kernel/git/([^/]*)/([^/]*)$'],
                                 r'https://git.kernel.org/pub/scm/linux/kernel/git/\1/\2/commit/?id=%s')

####### BUILDSLAVES

c['workers'] = [
    worker.Worker('zek',
                  master_auth_config['zek-worker-pass'], max_builds=1,
                  notify_on_missing=['k.kozlowski.k+buildbot@gmail.com'],
                  missing_timeout=60,
                  properties={'git_env': {},
                              # A lot of RAM so keep entire output (~2.5 GB) in /tmp,
                              # but as this is shared for all builders it requires
                              # max_builds=1 (which anyway we have).
                              'worker_kbuild_output': '/tmp/zek-buildbot/',
                             }),
    worker.Worker('pi3-slave',
                  master_auth_config['pi3-slave-pass'], max_builds=1,
                  notify_on_missing=['k.kozlowski.k+buildbot@gmail.com'],
                  missing_timeout=60,
                  properties={'git_env': {}}),
]

SLAVE_ALL = ['zek']
SLAVE_BOOT = ['pi3-slave']

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

def get_gitpoller(project_name, workdir):
    return changes.GitPoller(
        projects[project_name]['repo_git_poller'],
        project=projects[project_name]['name'],
        workdir=workdir,
        branches=projects[project_name]['branches'],
        buildPushesWithNoCommits=True,
        pollAtLaunch=False,
        pollInterval=projects[project_name]['polling'])

c['change_source'] = []
# Cronjob for each gitpoller workdir
c['change_source'].append(get_gitpoller('krzk-yocto', 'gitpoller-workdir-yocto'))
c['change_source'].append(get_gitpoller('krzk', 'gitpoller-workdir'))
c['change_source'].append(get_gitpoller('krzk-dt', 'gitpoller-workdir-dt'))
c['change_source'].append(get_gitpoller('krzk-mem-ctrl', 'gitpoller-workdir-mem-ctrl'))
c['change_source'].append(get_gitpoller('krzk-pinctrl', 'gitpoller-workdir-pinctrl'))
c['change_source'].append(get_gitpoller('krzk-w1', 'gitpoller-workdir-w1'))
c['change_source'].append(get_gitpoller('mainline', 'gitpoller-workdir-mainline'))
c['change_source'].append(get_gitpoller('next', 'gitpoller-workdir-next'))
c['change_source'].append(get_gitpoller('stable', 'gitpoller-workdir-stable'))

####### BUILDERS

# Builder names have to be defined before builders themself because
# some of configuring steps depend on them
builder_names_krzk_yocto = ['build-yocto-board-test-image-qemuarm']
builder_names_mainline = ['build-mainline-arm_exynos', 'build-mainline-arm_multi_v5', 'build-mainline-arm_multi_v7',
                          'build-mainline-arm_axxia', 'build-mainline-arm_moxart',
                          'build-mainline-arm_qcom', 'build-mainline-arm_vt8500', 'build-mainline-arm64',
                          'build-mainline-dtbs-check-arm-exynos', 'build-mainline-dtbs-check-arm-s3c6400',
                          'build-mainline-dtbs-check-arm-s5pv210', 'build-mainline-dtbs-check-arm64-exynos']
builder_names_next = ['build-next-arm_exynos', 'build-next-arm_multi_v5', 'build-next-arm_multi_v7',
                      'build-next-arm_axxia', 'build-next-arm_moxart',
                      'build-next-arm_qcom', 'build-next-arm_vt8500', 'build-next-arm64',
                      'build-next-dtbs-check-arm-exynos', 'build-next-dtbs-check-arm-s3c6400',
                      'build-next-dtbs-check-arm-s5pv210', 'build-next-dtbs-check-arm64-exynos']
# Next is not ready to run these:
builder_names_next_not_yet = ['build-next-dtbs-check-arm64-qcom', 'build-next-dtbs-check-boards-arm64-qcom']
builder_names_stable = ['build-stable-arm_exynos', 'build-stable-arm_multi_v7', 'build-stable-arm64']
# Builders scheduled for all krzk trees
builder_names_krzk_check = ['build-checkpatch']
builder_names_krzk_dt_check = ['build-dtbs-arm64', 'build-dtbs-arm-samsung', 'build-dtbs-arm-var']
builder_names_krzk_samsung_check = ['build-dtbs-check-arm-exynos', 'build-dtbs-check-arm-s3c6400',
                                    'build-dtbs-check-arm-s5pv210', 'build-dtbs-check-arm64-exynos']
builder_names_krzk = ['build-i386', 'build-x86_64', 'build-ppc64', 'build-riscv64', 'build-s390x', 'build-sparc64',
                      'build-arm64', 'build-arm_def', 'build-arm_multi_v5', 'build-arm_multi_v7', 'build-arm_qcom',
                      'build-dt-binding-check']
builder_names_krzk_dt = ['build-arm_axxia', 'build-arm_moxart', 'build-arm_vt8500']
builder_names_krzk_samsung = ['build-arm_s3c6400', 'build-arm_s5pv210',
                              'build-arm_exynos']
builder_names_allyes_selected = ['build-allyes-selected-arm', 'build-allyes-selected-arm64', 'build-allyes-selected-i386',
                                 'build-allyes-selected-ppc64', 'build-allyes-selected-riscv64', 'build-allyes-selected-s390x',
                                 'build-allyes-selected-sparc64', 'build-allyes-selected-x86_64',
                                 ]
builder_names_allyes = ['build-allyes-arm64', 'build-allyes-i386', 'build-allyes-ppc64',
                        'build-allyes-x86_64',
                        'build-allmod-arm64', 'build-allmod-i386', 'build-allmod-ppc64',
                        'build-allmod-x86_64',
                        ] + builder_names_allyes_selected
# Builders specific to mem-ctrl tree, scheduled only for changes in mem-ctrl
builder_names_krzk_mem_ctrl = ['build-memory-controllers-arm', 'build-memory-controllers-arm64',
                               'build-memory-controllers-i386', 'build-memory-controllers-ppc64',
                               'build-memory-controllers-riscv64', 'build-memory-controllers-s390x',
                               'build-memory-controllers-sparc64', 'build-memory-controllers-x86_64', ]
builder_names_krzk_w1 = ['build-w1-arm', 'build-w1-arm64',
                         'build-w1-i386', 'build-w1-ppc64',
                         'build-w1-riscv64', 'build-w1-s390x',
                         'build-w1-sparc64', 'build-w1-x86_64', ]

# Static (executed during parsing of config) builder helpers
def builder_is_krzk_kernel(name):
    global builder_names_krzk_dt
    global builder_names_krzk_samsung
    global builder_names_allyes
    global builder_names_krzk_mem_ctrl
    global builder_names_krzk_w1
    if name in builder_names_krzk_dt:
        return True
    if name in builder_names_krzk_samsung:
        return True
    if name in builder_names_krzk_mem_ctrl:
        return True
    if name in builder_names_krzk_w1:
        return True
    if name in builder_names_allyes:
        return True
    return False

def builder_is_krzk_bootable_kernel(name):
    # builder_names_krzk, builder_names_krzk_samsung
    builder_names_bootable = ['build-arm_multi_v7', 'build-arm_exynos']
    return name in builder_names_bootable

def builder_is_mainline_kernel(name):
    global builder_names_mainline
    if name in builder_names_mainline:
        return True
    return False

def builder_is_krzk_static_cheker(name):
    if name in builder_names_krzk_check:
        return True
    if name in builder_names_krzk_dt_check:
        return True
    if name in builder_names_krzk_samsung_check:
        return True
    return False

def step_is_kernel_with_odroid_hc1(step):
    # Minimum kernel version for Odroid HC1: 4.19
    ver = step.getProperty('kernel_version')
    if (not ver) or (not len(ver)):
        return False
    vers = ver.split('.')
    if len(vers) < 2:
        return False
    ver_major = int(vers[0])
    ver_minor = int(vers[1])
    if not ver_major:
        return False
    if ver_major > 4:
        return True
    if (ver_major == 4) and (ver_minor >= 19):
        return True
    return False

@defer.inlineCallbacks
def prioritize_builders(master, builders):
    """ Prioritize builders. Static checkers for krzk trees have
    the highest priority. Then krzk tree builders. Then the rest.
    Then prioritize ones with older job complete time.
    Then prioritize ones with older request time.

    Code based on Buildbot master/buildbot/process/buildrequestdistributor.py (GPLv2)
    """

    # perform an asynchronous schwarzian transform, transforming None
    # into sys.maxint so that it sorts to the end
    def xform(bldr):
        d = defer.maybeDeferred(bldr.getOldestRequestTime)
        d.addCallback(lambda time:
                        (((time is None) and None or time), bldr))
        return d
    xformed = yield defer.gatherResults(
        [xform(bldr) for bldr in builders])

    # sort the transformed list synchronously, comparing None to the end of
    # the list
    def xformedKey(a):
        """
        Key function can be used to sort a list
        where each list element is a tuple:
            (datetime.datetime, Builder)

        @return: a tuple of (date, builder name)
        """
        (date, builder) = a
        if date is None:
            # Choose a really big date, so that any
            # date set to 'None' will appear at the
            # end of the list during comparisons.
            date = datetime.max
            # Need to set the timezone on the date, in order
            # to perform comparisons with other dates which
            # have the time zone set.
            date = date.replace(tzinfo=tzutc())
        return (not builder_is_krzk_static_cheker(builder.name),
                not builder_is_krzk_kernel(builder.name),
                date)
        #return (date, builder.name)
    xformed.sort(key=xformedKey)

    # and reverse the transform
    rv = [xf[1] for xf in xformed]
    return rv

c['prioritizeBuilders'] = prioritize_builders

# Trigger booting (and maybe tests from boot-builder).
# Not every configuration of board/tree/defconfig will be booted
# or run tests.
#
# Matrix of configurations:
#
# board \ tree | krzk   | next | mainline | stable |
# Octa         |        |      |          |        |
# MC1          |        |      |          |        |
# HC1          | EtT,M  | EtT  | EtT      | Et     |
# U3           |        |      |          |        |
# X            |        |      | Et       |        |
#
# Legens:
# E: exynos_defconfig
# M: multi_v7_defconfig
# t: run simple tests (on chosen defconfig)
# T: run full test suite (on chosen defconfig)
def steps_build_boot_trigger(name, config, env):
    st = []
    boot_exynos_or_krzk = config == 'exynos' or builder_is_krzk_bootable_kernel(name)
    boot_exynos_and_mainline = config == 'exynos' and builder_is_mainline_kernel(name)
    # st.append(steps.Trigger(
    #     schedulerNames=['boot-arndale-octa-' + config],
    #     name='Boot Arndale Octa',
    #     set_properties={'trigger_builder': name},
    #     doStepIf=boot_exynos_and_mainline))
    st.append(steps.Trigger(
        schedulerNames=['boot-odroid-hc1-' + config],
        name='Boot Odroid HC1',
        set_properties={'trigger_builder': name},
        doStepIf=lambda step: boot_exynos_or_krzk and step_is_kernel_with_odroid_hc1(step)))
    st.append(steps.Trigger(
        schedulerNames=['boot-odroid-x-' + config],
        name='Boot Odroid X',
        set_properties={'trigger_builder': name},
        doStepIf=boot_exynos_and_mainline))
    return st

env_kbuild_out_raw = '%(prop:worker_kbuild_output:-./)sout/'
f_env = {
    'arm': {'ARCH': 'arm', 'CROSS_COMPILE': 'arm-linux-gnueabi-'},
    'arm64': {'ARCH': 'arm64', 'CROSS_COMPILE': 'aarch64-linux-gnu-'},
    'i386': {'ARCH': 'i386'},
    'ppc64': {'ARCH': 'powerpc', 'CROSS_COMPILE': 'powerpc64-linux-gnu-'},
    'riscv64': {'ARCH': 'riscv', 'CROSS_COMPILE': 'riscv64-linux-gnu-'},
    's390x': {'ARCH': 's390', 'CROSS_COMPILE': 's390x-linux-gnu-'},
    'sparc64': {'ARCH': 'sparc', 'CROSS_COMPILE': 'sparc64-linux-gnu-'},
    'x86_64': {'ARCH': 'x86_64'},
}
for key in f_env:
    f_env[key]['KBUILD_OUTPUT'] = util.Interpolate(env_kbuild_out_raw)
    f_env[key]['PATH'] = '/usr/local/bin:${PATH}'

def get_builder(builder_name, env, config=None, boot=False, steps_config=None, steps_compile=None):
    f = util.BuildFactory()
    f.addSteps(steps_build_common(env, env_kbuild_out_raw, config))
    if steps_config:
        f.addSteps(steps_config(env, env_kbuild_out_raw))

    if steps_compile:
        f.addSteps(steps_compile(builder_name, env))
    else:
        f.addSteps(steps_build_linux_kernel(env))
    if boot and config:
        f.addSteps(steps_build_boot_adjust_config(builder_name, env, env_kbuild_out_raw, config))
        f.addSteps(steps_build_linux_kernel(env, build_step_name='Build kernel (with booting addons)'))
        f.addStep(steps.Compile(command=[util.Interpolate('%(prop:builddir:-~/)s/tools/buildbot/build-slave-package.sh'),
                                         builder_name,
                                         env['KBUILD_OUTPUT']],
                                haltOnFailure=True, env=env, name='Package for booting'))
    f.addSteps(steps_build_upload_artifacts(builder_name, config, env_kbuild_out_raw, buildbot_url))
    if boot and config:
        f.addSteps(steps_build_upload_artifacts_binaries(builder_name, config, env_kbuild_out_raw))
    if boot and config:
        f.addSteps(steps_build_boot_trigger(builder_name, config, env))
    f.addSteps(steps_build_clean(env, always_run=True))
    return util.BuilderConfig(name=builder_name,
                              workernames=SLAVE_ALL,
                              # TODO: parametrize - use projects
                              workerbuilddir='kernel',
                              factory=f)

def get_builder_warnings(builder_name, env, config=None, boot=False, steps_config=None):
    return get_builder(builder_name, env, config, boot, steps_config,
                       steps_compile=steps_build_with_warnings_diff)

def get_checkpatch_builder(builder_name, env, config=None):
    f = util.BuildFactory()
    f.addSteps(steps_build_common(env, env_kbuild_out_raw, config))

    f.addStep(steps.ShellCommand(command=['scripts/checkpatch.pl', '-g', util.Property('revision')],
                                 haltOnFailure=False, env=env, name='Run checkpatch on commit'))
    f.addStep(steps.ShellCommand(command=['./scripts/get_maintainer.pl', '--self-test=patterns'],
                                 haltOnFailure=False, env=env, name='Run get_maintainer.pl self-test'))
    f.addStep(steps.ShellCommand(command=[util.Interpolate('%(prop:builddir:-~/)s/tools/linux/verify_signedoff.sh'),
                                          util.Interpolate('%(prop:revision)s^..%(prop:revision)s')],
                                 haltOnFailure=False, env=env, name='Run verify_signedoff on commit'))
    f.addStep(steps.ShellCommand(command=[util.Interpolate('%(prop:builddir:-~/)s/tools/linux/verify_fixes.sh'),
                                          # No Linus' master ref
                                          'HEAD',
                                          util.Interpolate('%(prop:revision)s^..%(prop:revision)s')],
                                 haltOnFailure=False, env=env, name='Run verify_fixes on commit'))
    f.addSteps(steps_build_clean(env, always_run=True))
    return util.BuilderConfig(name=builder_name,
                              workernames=SLAVE_ALL,
                              workerbuilddir='kernel',
                              factory=f)

def get_dt_binding_builder(builder_name, env):
    f = util.BuildFactory()
    f.addSteps(steps_dt_binding_check(env, env_kbuild_out_raw))
    f.addSteps(steps_build_clean(env, always_run=True))
    return util.BuilderConfig(name=builder_name,
                              workernames=SLAVE_ALL,
                              workerbuilddir='kernel',
                              factory=f)

def get_dtbs_check_builder(builder_name, env, platform, config=None, only_changed_files=True):
    f = util.BuildFactory()
    next_or_mainline = False
    if 'mainline' in builder_name or 'next' in builder_name:
        next_or_mainline = True
    f.addSteps(steps_dtbs_check(env, env_kbuild_out_raw, platform,
                                config, only_changed_files=only_changed_files,
                                next_or_mainline=next_or_mainline))
    f.addSteps(steps_build_clean(env, always_run=True))
    return util.BuilderConfig(name=builder_name,
                              workernames=SLAVE_ALL,
                              workerbuilddir='kernel',
                              factory=f)

def get_dtbs_check_boards_builder(builder_name, env, boards, config=None):
    f = util.BuildFactory()
    f.addSteps(steps_dtbs_check_boards(env, env_kbuild_out_raw, boards, config))
    f.addSteps(steps_build_clean(env, always_run=True))
    return util.BuilderConfig(name=builder_name,
                              workernames=SLAVE_ALL,
                              workerbuilddir='kernel',
                              factory=f)

def get_dtbs_warnings_builder(builder_name, platform):
    f = util.BuildFactory()
    if platform == 'arm64':
        f.addSteps(steps_build_common(f_env['arm64'], env_kbuild_out_raw))
        f.addSteps(steps_dtbs_warnings(f_env['arm64'], env_kbuild_out_raw))
    elif platform == 'arm-samsung':
        f.addSteps(steps_build_common(f_env['arm'], env_kbuild_out_raw, 'exynos'))
        f.addSteps(steps_dtbs_warnings(f_env['arm'], env_kbuild_out_raw, config='exynos'))
        f.addStep(step_make_config(f_env['arm'], 's3c6400'))
        f.addSteps(steps_dtbs_warnings(f_env['arm'], env_kbuild_out_raw, config='s3c6400'))
        f.addStep(step_make_config(f_env['arm'], 's5pv210'))
        f.addSteps(steps_dtbs_warnings(f_env['arm'], env_kbuild_out_raw, config='s5pv210'))
    elif platform == 'arm-var':
        # multi_v4 and v5 boards
        f.addSteps(steps_build_common(f_env['arm'], env_kbuild_out_raw, 'multi_v5'))
        f.addSteps(steps_build_arm_var_multi_v4_v5_adjust_config(f_env['arm'], env_kbuild_out_raw))
        f.addSteps(steps_dtbs_warnings(f_env['arm'], env_kbuild_out_raw, config='multi_v5'))
        f.addStep(step_make_config(f_env['arm'], 'moxart'))
        f.addSteps(steps_dtbs_warnings(f_env['arm'], env_kbuild_out_raw, config='moxart'))

        # multi_v6 and v7 boards
        f.addStep(step_make_config(f_env['arm'], 'multi_v7'))
        f.addSteps(steps_build_arm_var_multi_v6_v7_adjust_config(f_env['arm'], env_kbuild_out_raw))
        f.addSteps(steps_dtbs_warnings(f_env['arm'], env_kbuild_out_raw, config='multi_v7'))
        f.addStep(step_make_config(f_env['arm'], 'axm55xx'))
        f.addSteps(steps_dtbs_warnings(f_env['arm'], env_kbuild_out_raw, config='axm55xx'))
        # vt8500_v6_v7 might be redundant because v6 and v7 vt8500 are built as part of multi_v5 earlier
        f.addStep(step_make_config(f_env['arm'], 'vt8500_v6_v7'))
        f.addSteps(steps_dtbs_warnings(f_env['arm'], env_kbuild_out_raw, config='vt8500_v6_v7'))
    f.addSteps(steps_build_clean(f_env['arm'], always_run=True))
    return util.BuilderConfig(name=builder_name,
                              workernames=SLAVE_ALL,
                              workerbuilddir='kernel',
                              factory=f)

def get_yocto_builder(builder_name, machine, image):
    f = util.BuildFactory()
    f.addSteps(steps_yocto_builder(machine, image))
    return util.BuilderConfig(name=builder_name,
                              workernames=SLAVE_ALL,
                              workerbuilddir='yocto',
                              factory=f)

c['builders'] = []
c['builders'].append(get_yocto_builder('build-yocto-board-test-image-qemuarm', 'qemuarm',
                                       'board-test-image'))

c['builders'].append(get_builder_warnings('build-i386', f_env['i386']))
c['builders'].append(get_builder_warnings('build-x86_64', f_env['x86_64']))
c['builders'].append(get_builder_warnings('build-ppc64', f_env['ppc64']))
c['builders'].append(get_builder_warnings('build-riscv64', f_env['riscv64']))
c['builders'].append(get_builder_warnings('build-s390x', f_env['s390x']))
c['builders'].append(get_builder_warnings('build-sparc64', f_env['sparc64']))
c['builders'].append(get_builder_warnings('build-arm64', f_env['arm64']))
c['builders'].append(get_builder_warnings('build-arm_def', f_env['arm']))
c['builders'].append(get_builder_warnings('build-arm_s3c6400', f_env['arm'],
                                          config='s3c6400'))
c['builders'].append(get_builder_warnings('build-arm_s5pv210', f_env['arm'],
                                          config='s5pv210'))
c['builders'].append(get_builder_warnings('build-arm_exynos', f_env['arm'],
                                          config='exynos', boot=True))
c['builders'].append(get_builder_warnings('build-arm_multi_v7', f_env['arm'],
                                          config='multi_v7', boot=True))

c['builders'].append(get_builder_warnings('build-arm_axxia', f_env['arm'],
                                          config='axm55xx'))
c['builders'].append(get_builder_warnings('build-arm_multi_v5', f_env['arm'],
                                          config='multi_v5'))
c['builders'].append(get_builder_warnings('build-arm_moxart', f_env['arm'],
                                          config='moxart'))
c['builders'].append(get_builder_warnings('build-arm_qcom', f_env['arm'],
                                          config='qcom'))
c['builders'].append(get_builder_warnings('build-arm_vt8500', f_env['arm'],
                                          config='vt8500_v6_v7'))

c['builders'].append(get_builder_warnings('build-memory-controllers-arm', f_env['arm'],
                                          steps_config=steps_build_mem_ctrl_adjust_config))
c['builders'].append(get_builder_warnings('build-memory-controllers-arm64', f_env['arm64'],
                                          steps_config=steps_build_mem_ctrl_adjust_config))
c['builders'].append(get_builder_warnings('build-memory-controllers-i386', f_env['i386'],
                                          steps_config=steps_build_mem_ctrl_adjust_config))
c['builders'].append(get_builder_warnings('build-memory-controllers-ppc64', f_env['ppc64'],
                                          steps_config=steps_build_mem_ctrl_adjust_config))
c['builders'].append(get_builder_warnings('build-memory-controllers-riscv64', f_env['riscv64'],
                                          steps_config=steps_build_mem_ctrl_adjust_config))
c['builders'].append(get_builder_warnings('build-memory-controllers-s390x', f_env['s390x'],
                                          steps_config=steps_build_mem_ctrl_adjust_config))
c['builders'].append(get_builder_warnings('build-memory-controllers-sparc64', f_env['sparc64'],
                                          steps_config=steps_build_mem_ctrl_adjust_config))
c['builders'].append(get_builder_warnings('build-memory-controllers-x86_64', f_env['x86_64'],
                                          steps_config=steps_build_mem_ctrl_adjust_config))

c['builders'].append(get_builder_warnings('build-w1-arm', f_env['arm'],
                                          steps_config=steps_build_w1_adjust_config))
c['builders'].append(get_builder_warnings('build-w1-arm64', f_env['arm64'],
                                          steps_config=steps_build_w1_adjust_config))
c['builders'].append(get_builder_warnings('build-w1-i386', f_env['i386'],
                                          steps_config=steps_build_w1_adjust_config))
c['builders'].append(get_builder_warnings('build-w1-ppc64', f_env['ppc64'],
                                          steps_config=steps_build_w1_adjust_config))
c['builders'].append(get_builder_warnings('build-w1-riscv64', f_env['riscv64'],
                                          steps_config=steps_build_w1_adjust_config))
c['builders'].append(get_builder_warnings('build-w1-s390x', f_env['s390x'],
                                          steps_config=steps_build_w1_adjust_config))
c['builders'].append(get_builder_warnings('build-w1-sparc64', f_env['sparc64'],
                                          steps_config=steps_build_w1_adjust_config))
c['builders'].append(get_builder_warnings('build-w1-x86_64', f_env['x86_64'],
                                          steps_config=steps_build_w1_adjust_config))

c['builders'].append(get_builder('build-allyes-selected-arm', f_env['arm'], config='allyes',
                                 steps_config=steps_build_all_drivers_adjust_config,
                                 steps_compile=steps_build_selected_folders))
c['builders'].append(get_builder('build-allyes-selected-arm64', f_env['arm64'], config='allyes',
                                 steps_config=steps_build_all_drivers_adjust_config,
                                 steps_compile=steps_build_selected_folders))
c['builders'].append(get_builder('build-allyes-selected-i386', f_env['i386'], config='allyes',
                                 steps_config=steps_build_all_drivers_adjust_config,
                                 steps_compile=steps_build_selected_folders))
c['builders'].append(get_builder('build-allyes-selected-ppc64', f_env['ppc64'], config='allyes',
                                 steps_config=steps_build_all_drivers_adjust_config,
                                 steps_compile=steps_build_selected_folders))
c['builders'].append(get_builder('build-allyes-selected-riscv64', f_env['riscv64'], config='allyes',
                                 steps_config=steps_build_all_drivers_adjust_config,
                                 steps_compile=steps_build_selected_folders))
c['builders'].append(get_builder('build-allyes-selected-s390x', f_env['s390x'], config='allyes',
                                 steps_config=steps_build_all_drivers_adjust_config,
                                 steps_compile=steps_build_selected_folders))
c['builders'].append(get_builder('build-allyes-selected-sparc64', f_env['sparc64'], config='allyes',
                                 steps_config=steps_build_all_drivers_adjust_config,
                                 steps_compile=steps_build_selected_folders))
c['builders'].append(get_builder('build-allyes-selected-x86_64', f_env['x86_64'], config='allyes',
                                 steps_config=steps_build_all_drivers_adjust_config,
                                 steps_compile=steps_build_selected_folders))

# c['builders'].append(get_builder_warnings('build-allyes-arm', f_env['arm'],
#                                           config='allyes'))
c['builders'].append(get_builder_warnings('build-allyes-arm64', f_env['arm64'],
                                          config='allyes'))
c['builders'].append(get_builder_warnings('build-allyes-i386', f_env['i386'],
                                          config='allyes'))
c['builders'].append(get_builder_warnings('build-allyes-ppc64', f_env['ppc64'],
                                          config='allyes'))
# c['builders'].append(get_builder_warnings('build-allyes-riscv64', f_env['riscv64'],
#                                           config='allyes'))
# c['builders'].append(get_builder_warnings('build-allyes-s390x', f_env['s390x'],
#                                           config='allyes'))
# c['builders'].append(get_builder_warnings('build-allyes-sparc64', f_env['sparc64'],
#                                           config='allyes'))
c['builders'].append(get_builder_warnings('build-allyes-x86_64', f_env['x86_64'],
                                          config='allyes'))

# c['builders'].append(get_builder_warnings('build-allmod-arm', f_env['arm'],
#                                           config='allmod'))
c['builders'].append(get_builder_warnings('build-allmod-arm64', f_env['arm64'],
                                          config='allmod'))
c['builders'].append(get_builder_warnings('build-allmod-i386', f_env['i386'],
                                          config='allmod'))
c['builders'].append(get_builder_warnings('build-allmod-ppc64', f_env['ppc64'],
                                          config='allmod'))
# c['builders'].append(get_builder_warnings('build-allmod-riscv64', f_env['riscv64'],
#                                           config='allmod'))
# c['builders'].append(get_builder_warnings('build-allmod-s390x', f_env['s390x'],
#                                           config='allmod'))
# c['builders'].append(get_builder_warnings('build-allmod-sparc64', f_env['sparc64'],
#                                           config='allmod'))
c['builders'].append(get_builder_warnings('build-allmod-x86_64', f_env['x86_64'],
                                          config='allmod'))

# After getting names for builder_names_krzk, builders for other:
# TODO: Smarter way of generation builders and schedulers
# TODO: The builders will use same builddirs on slaves as for krzk repo which will
#		cause huge rebuild (especially after next change).
#		Maybe separate directory for repos? This could speed up building in case of multiple
#		jobs coming from repos in same time.
#		But will that help? Still the repo resides in builddir's parent and revision has to
#		to be checked out so all sources will change?
# Builder build-checkpatch is not really part of regular krzk builders because it skips master branch
c['builders'].append(get_checkpatch_builder('build-checkpatch', f_env['arm']))
c['builders'].append(get_dt_binding_builder('build-dt-binding-check', f_env['arm64']))
c['builders'].append(get_dtbs_warnings_builder('build-dtbs-arm64', 'arm64'))
c['builders'].append(get_dtbs_warnings_builder('build-dtbs-arm-var', 'arm-var'))
c['builders'].append(get_dtbs_warnings_builder('build-dtbs-arm-samsung', 'arm-samsung'))
c['builders'].append(get_dtbs_check_builder('build-dtbs-check-arm-exynos', f_env['arm'], 'samsung',
                                            config='exynos'))
c['builders'].append(get_dtbs_check_builder('build-dtbs-check-arm-s3c6400', f_env['arm'], 'samsung',
                                            config='s3c6400'))
c['builders'].append(get_dtbs_check_builder('build-dtbs-check-arm-s5pv210', f_env['arm'], 'samsung',
                                            config='s5pv210'))
c['builders'].append(get_dtbs_check_builder('build-dtbs-check-arm64-exynos', f_env['arm64'], 'samsung'))

c['builders'].append(get_builder('build-mainline-arm_exynos', f_env['arm'], config='exynos', boot=True))
c['builders'].append(get_builder('build-mainline-arm_multi_v7', f_env['arm'], config='multi_v7'))
c['builders'].append(get_builder('build-mainline-arm_axxia', f_env['arm'], config='axm55xx'))
c['builders'].append(get_builder('build-mainline-arm_multi_v5', f_env['arm'], config='multi_v5'))
c['builders'].append(get_builder('build-mainline-arm_moxart', f_env['arm'], config='moxart'))
c['builders'].append(get_builder('build-mainline-arm_qcom', f_env['arm'], config='qcom'))
c['builders'].append(get_builder('build-mainline-arm_vt8500', f_env['arm'], config='vt8500_v6_v7'))
c['builders'].append(get_builder('build-mainline-arm64', f_env['arm64']))
c['builders'].append(get_dtbs_check_builder('build-mainline-dtbs-check-arm-exynos', f_env['arm'], 'samsung',
                                            config='exynos', only_changed_files=False))
c['builders'].append(get_dtbs_check_builder('build-mainline-dtbs-check-arm-s3c6400', f_env['arm'], 'samsung',
                                            config='s3c6400', only_changed_files=False))
c['builders'].append(get_dtbs_check_builder('build-mainline-dtbs-check-arm-s5pv210', f_env['arm'], 'samsung',
                                            config='s5pv210', only_changed_files=False))
c['builders'].append(get_dtbs_check_builder('build-mainline-dtbs-check-arm64-exynos', f_env['arm64'], 'samsung',
                                            only_changed_files=False))

c['builders'].append(get_builder('build-next-arm_exynos', f_env['arm'], config='exynos', boot=True))
c['builders'].append(get_builder('build-next-arm_multi_v7', f_env['arm'], config='multi_v7'))
c['builders'].append(get_builder('build-next-arm_axxia', f_env['arm'], config='axm55xx'))
c['builders'].append(get_builder('build-next-arm_multi_v5', f_env['arm'], config='multi_v5'))
c['builders'].append(get_builder('build-next-arm_moxart', f_env['arm'], config='moxart'))
c['builders'].append(get_builder('build-next-arm_qcom', f_env['arm'], config='qcom'))
c['builders'].append(get_builder('build-next-arm_vt8500', f_env['arm'], config='vt8500_v6_v7'))
c['builders'].append(get_builder('build-next-arm64', f_env['arm64']))
c['builders'].append(get_dtbs_check_builder('build-next-dtbs-check-arm-exynos', f_env['arm'], 'samsung',
                                            config='exynos', only_changed_files=False))
c['builders'].append(get_dtbs_check_builder('build-next-dtbs-check-arm-s3c6400', f_env['arm'], 'samsung',
                                            config='s3c6400', only_changed_files=False))
c['builders'].append(get_dtbs_check_builder('build-next-dtbs-check-arm-s5pv210', f_env['arm'], 'samsung',
                                            config='s5pv210', only_changed_files=False))
c['builders'].append(get_dtbs_check_builder('build-next-dtbs-check-arm64-exynos', f_env['arm64'], 'samsung',
                                            only_changed_files=False))
c['builders'].append(get_dtbs_check_builder('build-next-dtbs-check-arm64-qcom', f_env['arm64'], 'qcom',
                                            only_changed_files=False))

c['builders'].append(get_dtbs_check_boards_builder('build-next-dtbs-check-boards-arm64-qcom', f_env['arm64'],
                                                   DTBS_CHECK_BOARDS['arm64']['qcom']))

# Stable only with Exynos because multi_v7 could lack a lot of stuff for Odroid
c['builders'].append(get_builder('build-stable-arm_exynos', f_env['arm'], config='exynos', boot=True))
c['builders'].append(get_builder('build-stable-arm_multi_v7', f_env['arm'], config='multi_v7'))
c['builders'].append(get_builder('build-stable-arm64', f_env['arm64']))

# Boot/Deployers
def get_boot_builder(builder_name, target, config):
    f = util.BuildFactory()
    f.addSteps(steps_boot(builder_name, target, config))
    return util.BuilderConfig(name=builder_name,
                              workernames=SLAVE_BOOT,
                              workerbuilddir='builddir',
                              factory=f)

c['builders'].append(get_boot_builder('boot-arndale-octa-multi_v7', 'arndaleocta', 'multi_v7'))
c['builders'].append(get_boot_builder('boot-arndale-octa-exynos', 'arndaleocta', 'exynos'))
c['builders'].append(get_boot_builder('boot-odroid-hc1-multi_v7', 'odroidhc1', 'multi_v7'))
c['builders'].append(get_boot_builder('boot-odroid-hc1-exynos', 'odroidhc1', 'exynos'))
c['builders'].append(get_boot_builder('boot-odroid-mc1-multi_v7', 'odroidmc1', 'multi_v7'))
c['builders'].append(get_boot_builder('boot-odroid-mc1-exynos', 'odroidmc1', 'exynos'))
c['builders'].append(get_boot_builder('boot-odroid-u3-multi_v7', 'odroidu3', 'multi_v7'))
c['builders'].append(get_boot_builder('boot-odroid-u3-exynos', 'odroidu3', 'exynos'))
c['builders'].append(get_boot_builder('boot-odroid-x-multi_v7', 'odroidx', 'multi_v7'))
c['builders'].append(get_boot_builder('boot-odroid-x-exynos', 'odroidx', 'exynos'))

builder_names_boot = ['boot-arndale-octa-multi_v7', 'boot-arndale-octa-exynos',
                      'boot-odroid-hc1-multi_v7', 'boot-odroid-hc1-exynos',
                      'boot-odroid-mc1-multi_v7', 'boot-odroid-mc1-exynos',
                      'boot-odroid-u3-multi_v7', 'boot-odroid-u3-exynos',
                      'boot-odroid-x-multi_v7', 'boot-odroid-x-exynos',
                     ]

####### SCHEDULERS

# Building schedulers
import re

author_krzk = 'kozlowski'
# Change instance: Change(revision=u'', who=u'', branch=u'', comments=u'', when=, category=None, project=u'', repository=REPO, codebase=u'')
def change_commit_is_krzk(change):
    if re.search(author_krzk, change.who, flags=re.IGNORECASE):
        return True
    if re.search(author_krzk, change.comments, flags=re.IGNORECASE):
        return True
    return False

# Change instance: Change(revision=u'', who=u'', branch=u'', comments=u'', when=, category=None, project=u'', repository=REPO, codebase=u'')
# During merge window, Linus' tree is being built many times per day. Needlessly.
def change_commit_is_release(change):
    if re.search('^Linux [0-9]\.[0-9]{1,2}(-rc[1-9][0-9]?)?$', change.comments):
        print("Matched commit for release: " + str(change.comments))
        return True
    return False

def branch_krzk(branch):
    return branch not in ['master', '__about_repo__']

def branch_krzk_github_test(branch):
    return re.search('^test/', branch)

# treeStableTimer=None, for building each commit
c['schedulers'] = []
c['schedulers'].append(schedulers.AnyBranchScheduler(
    name=projects['krzk-yocto']['name'],
    treeStableTimer=(2*projects['krzk-yocto']['polling'] + 30), # 2*Poller + slack
    change_filter=util.ChangeFilter(project=projects['krzk-yocto']['name']),
    builderNames=builder_names_krzk_yocto,
    properties={
        'repository_src': projects['krzk-yocto']['repo_git_worker'],
    }))
c['schedulers'].append(schedulers.ForceScheduler(
    name='force-' + projects['krzk-yocto']['name'],
    builderNames=builder_names_krzk_yocto,
    properties=[util.FixedParameter(name='repository_src',
                                    default=projects['krzk-yocto']['repo_git_worker'])],
    codebases=[
        util.CodebaseParameter(
            name=projects['krzk-yocto']['name'],
            codebase='',
            project=util.FixedParameter(name='project', default=projects['krzk-yocto']['name']),
            repository=util.FixedParameter(name='repository', default=projects['krzk-yocto']['repo_git_worker']),
            branch=util.StringParameter(name='branch', default='master'),
            revision=util.StringParameter(name='revision', default=''),
        ),
    ]))

for project in ('krzk', 'krzk-dt', 'krzk-mem-ctrl', 'krzk-pinctrl', 'krzk-w1'):
    scheduler_builders = builder_names_allyes_selected + builder_names_krzk
    if project == 'krzk-dt':
        scheduler_builders.extend(builder_names_krzk_dt)
        scheduler_builders.extend(builder_names_krzk_dt_check)
    elif project == 'krzk-mem-ctrl':
        scheduler_builders.extend(builder_names_krzk_mem_ctrl)
    elif project == 'krzk-w1':
        scheduler_builders.extend(builder_names_krzk_w1)
    elif project == 'krzk-pinctrl':
        scheduler_builders.extend(builder_names_krzk_samsung)
    elif project == 'krzk':
        scheduler_builders.extend(builder_names_krzk_samsung)
        scheduler_builders.extend(builder_names_krzk_dt_check)
        scheduler_builders.extend(builder_names_krzk_samsung_check)
    c['schedulers'].append(schedulers.AnyBranchScheduler(
        name=projects[project]['name'],
        treeStableTimer=None,
        fileIsImportant=change_commit_is_krzk,
        change_filter=util.ChangeFilter(project=projects[project]['name'],
                                        branch_fn=branch_krzk),
        builderNames=scheduler_builders + builder_names_krzk_check,
        properties={
            'repository_src': projects[project]['repo_git_worker'],
        }))
    c['schedulers'].append(schedulers.SingleBranchScheduler(
        name=projects[project]['name'] + '-master',
        treeStableTimer=(projects[project]['polling'] + 30), # Poller + slack
        change_filter=util.ChangeFilter(project=projects[project]['name'],
                                        branch='master'),
        builderNames=scheduler_builders,
        properties={
            'repository_src': projects[project]['repo_git_worker'],
        }))

c['schedulers'].append(schedulers.SingleBranchScheduler(
    name=projects['mainline']['name'],
    fileIsImportant=change_commit_is_release,
    treeStableTimer=(2*projects['mainline']['polling'] + 30), # 2*Poller + slack
    change_filter=util.ChangeFilter(project=projects['mainline']['name'],
                                    branch=projects['mainline']['branches'][0]),
    builderNames=builder_names_mainline,
    properties={
        'repository_src': projects['mainline']['repo_git_worker'],
    }))
c['schedulers'].append(schedulers.AnyBranchScheduler(
    name=projects['next']['name'],
    treeStableTimer=(2*projects['next']['polling'] + 30), # 2*Poller + slack
    change_filter=util.ChangeFilter(project=projects['next']['name']),
    builderNames=builder_names_next,
    properties={
        'repository_src': projects['next']['repo_git_worker'],
    }))
c['schedulers'].append(schedulers.AnyBranchScheduler(
    name=projects['stable']['name'],
    treeStableTimer=(2*projects['stable']['polling'] + 30), # 2*Poller + slack
    change_filter=util.ChangeFilter(project=projects['stable']['name']),
    builderNames=builder_names_stable,
    properties={
        'repository_src': projects['stable']['repo_git_worker'],
    }))

c['schedulers'].append(schedulers.ForceScheduler(
    name='force-' + projects['krzk']['name'],
    label='Force build',
    builderNames=builder_names_krzk + builder_names_krzk_dt + builder_names_krzk_dt_check + \
                 builder_names_krzk_samsung + builder_names_krzk_samsung_check + \
                 builder_names_allyes + builder_names_krzk_mem_ctrl + builder_names_krzk_w1 + \
                 builder_names_krzk_check,
    codebases=[
        util.CodebaseParameter(
            name=projects['krzk']['name'],
            codebase='',
            project=util.StringParameter(name='project', default=projects['krzk']['name']),
            repository=ChoiceStringParameter(
                name='repository',
                label='Repository',
                choices=[projects['krzk']['repo_git_worker'],
                         projects['krzk-dt']['repo_git_worker'],
                         projects['krzk-mem-ctrl']['repo_git_worker'],
                         projects['krzk-pinctrl']['repo_git_worker'],
                         projects['krzk-w1']['repo_git_worker'],
                        ],
                default=projects['krzk']['repo_git_worker'],
                # Autopopulate does not work for codebase (as of v1.3.0)
                # autopopulate={
                #     # Choose automatically appropriate project for given repo
                #     projects['krzk']['repo_git_worker']: {
                #         'project': projects['krzk']['name'],
                #     },
                #     projects['krzk-pinctrl']['repo_git_worker']: {
                #         'project': projects['krzk-pinctrl']['name'],
                #     },
                # },
                strict=True),
            branch=util.StringParameter(name='branch', default='master'),
            revision=util.StringParameter(name='revision', default=''),
        ),
    ],
    ))
c['schedulers'].append(schedulers.ForceScheduler(
    name='force-' + projects['mainline']['name'],
    builderNames=builder_names_mainline,
    properties=[util.FixedParameter(name='repository_src',
                                    default=projects['mainline']['repo_git_worker'])],
    codebases=[
        util.CodebaseParameter(
            name=projects['mainline']['name'],
            codebase='',
            project=util.FixedParameter(name='project', default=projects['mainline']['name']),
            repository=util.FixedParameter(name='repository', default=projects['mainline']['repo_git_worker']),
            branch=util.StringParameter(name='branch', default='master'),
            revision=util.StringParameter(name='revision', default=''),
        ),
    ]))
c['schedulers'].append(schedulers.ForceScheduler(
    name='force-' + projects['next']['name'],
    builderNames=builder_names_next + builder_names_next_not_yet,
    properties=[util.FixedParameter(name='repository_src',
                                    default=projects['next']['repo_git_worker'])],
    codebases=[
        util.CodebaseParameter(
            name=projects['next']['name'],
            codebase='',
            project=util.FixedParameter(name='project', default=projects['next']['name']),
            repository=util.FixedParameter(name='repository', default=projects['next']['repo_git_worker']),
            branch=util.StringParameter(name='branch', default='master'),
            revision=util.StringParameter(name='revision', default=''),
        ),
    ]))
c['schedulers'].append(schedulers.ForceScheduler(
    name='force-' + projects['stable']['name'],
    builderNames=builder_names_stable,
    properties=[util.FixedParameter(name='repository_src',
                                    default=projects['stable']['repo_git_worker'])],
    codebases=[
        util.CodebaseParameter(
            name=projects['stable']['name'],
            codebase='',
            project=util.FixedParameter(name='project', default=projects['stable']['name']),
            repository=util.FixedParameter(name='repository', default=projects['stable']['repo_git_worker']),
            branch=ChoiceStringParameter(
                name='branch',
                label='Branch',
                choices=projects['stable']['branches'],
                default=projects['stable']['branches'][0],
                strict=False),
            revision=util.StringParameter(name='revision', default=''),
        ),
    ]))
c['schedulers'].append(schedulers.ForceScheduler(
    name='force-boot',
    properties=[ChoiceStringParameter(name='trigger_builder',
                                      label='Trigger builder',
                                      choices=['build-arm_exynos',
                                               'build-arm_multi_v7',
                                               'build-mainline-arm_exynos',
                                               'build-mainline-arm_multi_v7',
                                               'build-next-arm_exynos',
                                               'build-next-arm_multi_v7',
                                               'build-stable-arm_exynos',
                                               'build-stable-arm_multi_v7'],
                                      default='build-arm_exynos',
                                      strict=True)],
    codebases=[
        util.CodebaseParameter(
            codebase='force-boot-codebase',
            label='Changesource information',
            project=util.FixedParameter(name='project', default='', label='ignored'),
            repository=util.FixedParameter(name='repository', default='', label='ignored'),
            branch=util.FixedParameter(name='branch', default='', label='ignored'),
            revision=util.StringParameter(name='revision', default=''),
        ),
    ],
    builderNames=builder_names_boot))

# Add Triggerable booting schedulers for each boot configuration. We need separate Triggerable
# so each build config can trigger specific, not all, boots.
# See: Matrix of configurations
for builder in builder_names_boot:
    c['schedulers'].append(schedulers.Triggerable(
        name=builder,
        builderNames=[builder]))

####### STATUS TARGETS

authz = util.Authz(
    allowRules=[util.AnyControlEndpointMatcher(role='admins')],
    roleMatchers=[util.RolesFromEmails(admins=['krzk@kernel.org'])]
)

c['www'] = { 'port': 8010,
             'plugins': {'waterfall_view': {'num_builds': 50},
                         'console_view': {},
                         'grid_view': {},
                        },
             'authz': authz,
             'auth': util.UserPasswordAuth(master_auth_config['www-auth']),
             'custom_templates_dir' : 'www-templates',
             'debug': False,
}

generator1 = reporters.BuildStatusGenerator(mode=('failing', 'problem', 'warnings', 'exception',))
generator2 = reporters.WorkerMissingGenerator()
mn = reporters.MailNotifier(fromaddr='kozik.server+dumbo.buildbot@gmail.com',
                            sendToInterestedUsers=False,
                            relayhost='localhost',
                            extraRecipients=['k.kozlowski.k+buildbot@gmail.com'],
                            generators=[generator1, generator2])
c['services'] = []
c['services'].append(mn)

####### SOME GLOBAL SETTINGS

####### PROJECT IDENTITY

c['title'] = 'Krzk Samsung SoC'
c['titleURL'] = repo_krzk_web
c['buildbotURL'] = buildbot_url

####### DB URL

c['db'] = {
    'db_url': 'mysql://buildbot:' + master_auth_config['mysql-pass'] + '@localhost/buildbot',
}
