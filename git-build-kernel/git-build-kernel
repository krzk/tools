#!/bin/bash
#
# git-build-kernel
# Kamal Mostafa <kamal@canonical.com>
# Copyright 2022 Canonical Ltd.
# Copyright (c) 2022 Krzysztof Kozlowski <krzk@kernel.org>
#
# SPDX-License-Identifier: GPL-3.0-only
#

DEFAULT_CONFIG="defconfig"

function usage() {
	{
	echo "usage: git-build-kernel -r {ref} -a <arch> [options]"
	echo
	echo " Mandatory options:"
	echo " -a <arch>          - Architecture ARCH"
	echo " -r <ref>           - branch|tag|ref|commit to build"
	echo
	echo " Options:"
	echo " -c <config_name>   - Optional name of config to use."
	echo "                      Default config: $DEFAULT_CONFIG"
	echo " -t <target>        - Optional make target"
	echo "                      Default target: empty, so same as Makefile's default"

	} 1>&2
	exit 1
}

have_ccache() {
	which ccache > /dev/null
	echo $?
}

###
### Process cmdline arguments

ARCH=""
DEFCONFIG="$DEFAULT_CONFIG"
GITBRANCH=""
TARGET=""

while getopts "a:c:r:t:h" flag
do
	case "$flag" in
		a)
			ARCH="$OPTARG"
			;;
		c)
			DEFCONFIG="$OPTARG"
			;;
		r)
			GITBRANCH="$OPTARG"
			;;
		t)
			TARGET="$OPTARG"
			;;
		h)
			usage
			;;
		*)
			usage
			;;
	esac
done

[ -z "$GITBRANCH" ] && usage
[ -z "$ARCH" ] && usage

CROSS_COMPILE=""
if [ "$ARCH" = "alpha" ]; then
	export CROSS_COMPILE="alpha-linux-gnu-"
elif [ "$ARCH" = "arm" ]; then
	export CROSS_COMPILE="arm-linux-gnueabi-"
elif [ "$ARCH" = "arm64" ]; then
	export CROSS_COMPILE="aarch64-linux-gnu-"
elif [ "$ARCH" = "i386" ]; then
	export CROSS_COMPILE=""
elif [ "$ARCH" = "m68k" ]; then
	export CROSS_COMPILE="m68k-linux-gnu-"
elif [ "$ARCH" = "mips" ]; then
	export CROSS_COMPILE="mips-linux-gnu-"
elif [ "$ARCH" = "parisc" ]; then
	export CROSS_COMPILE="hppa-linux-gnu-"
elif [ "$ARCH" = "powerpc" ]; then
	export CROSS_COMPILE="powerpc-linux-gnu-"
elif [ "$ARCH" = "powerpc64" ]; then
	export ARCH="powerpc"
	export CROSS_COMPILE="powerpc64-linux-gnu-"
elif [ "$ARCH" = "riscv" ]; then
	export CROSS_COMPILE="riscv64-linux-gnu-"
elif [ "$ARCH" = "s390" ]; then
	export CROSS_COMPILE="s390x-linux-gnu-"
elif [ "$ARCH" = "sh" ]; then
	export CROSS_COMPILE="sh4-linux-gnu-"
elif [ "$ARCH" = "sparc" ]; then
	export CROSS_COMPILE="sparc64-linux-gnu-"
elif [ "$ARCH" = "x86_64" ]; then
	export CROSS_COMPILE=""
else
	echo "fatal: unsupported arch $ARCH" 1>&2
	exit 1
fi

###
### System and repo checks

if [ "$(have_ccache)" == "0" ]; then
	CROSS_COMPILE="ccache $CROSS_COMPILE"
fi

# Note: don't use --show-toplevel; it fails inside .git/
GITREPO="`git rev-parse --git-dir`"
[ "$GITREPO" = "." ] && GITREPO="$PWD"
GITREPO="${GITREPO%/.git}"
[ -z "$GITREPO" ] && {
	echo "fatal: Not a git repository (or any of the parent directories)" 1>&2
	exit 1
}

GITSHASHORT="`git log -1 --pretty=%h ${GITBRANCH%%refs/heads/} --`"
[ -z "$GITSHASHORT" ] && {	# (this can probably never happen)
	echo "warning: Can't determine GITSHASHORT from GITBRANCH=$GITBRANCH" 1>&2
	GITSHASHORT="UNKNOWN-XXXX"
}

###
### Set up the /tmp work directory

WORKDIR="kernel-$LOGNAME-$GITSHASHORT-XXXX"
WORKDIR="`mktemp -u -d -t $WORKDIR`"
mkdir "$WORKDIR" || exit

BUILDDIR="$WORKDIR/build"
LOG="$WORKDIR/build.log"
touch "$WORKDIR/building"
trap "rm -rf $WORKDIR/building $BUILDDIR" 0

###
### Run the build process in a subshell and capture output to a logfile.

echo "git-build-kernel"
echo "       defconfig: $DEFCONFIG"
echo "       arch: $ARCH"
echo "       cc: $CROSS_COMPILE"
[ -n "$TARGET" ] && echo "       target: $TARGET"
echo "  starting build in $HOSTNAME:$WORKDIR ..."
echo "  build log: $HOSTNAME:$LOG"
JOBS="-j$(nproc)"

function show_elapsed
{
	while [ -f $WORKDIR/building ]
	do
		loadavg="`uptime`"
		loadavg="load${loadavg##*load}"
		elapsed=`date --utc --date="@$SECONDS" +%H:%M:%S`
		echo -n -e "\r  elapsed: $elapsed   $loadavg"
		sleep 11
	done
}

show_elapsed &
(
	set -e
	echo "+++gbk++++ git-build-kernel"
	echo "+++gbk++++   ($HOSTNAME:$WORKDIR)"
	echo "+++gbk++++   ARCH=\"$ARCH\" CROSS_COMPILE=\"$CROSS_COMPILE\""

	echo "+++gbk++++ git archive $GITREPO ($GITBRANCH)"
	mkdir "$BUILDDIR"
	git archive --format=tar "$GITBRANCH" | tar -x -C "$BUILDDIR"
	echo "+++gbk++++ builddir size: $(du -sh $BUILDDIR | cut -f 1)"

	cd "$BUILDDIR"
	echo "+++gbk++++ make $JOBS $DEFCONFIG"
	ARCH="$ARCH" CROSS_COMPILE="$CROSS_COMPILE" make $JOBS $DEFCONFIG

	echo "+++gbk++++ make $JOBS $TARGET"
	ARCH="$ARCH" CROSS_COMPILE="$CROSS_COMPILE" make $JOBS $TARGET

	STATUS=$?
	echo "+++gbk++++ build exit status was $STATUS"
	echo "+++gbk++++ builddir size: $(du -sh $BUILDDIR | cut -f 1)"
	exit $STATUS
) > $LOG 2>&1
STATUS=$?

rm -f "$WORKDIR/building"
echo

###
### Output information about the build status and products

if [ $STATUS = 0 ]
then echo "  build completed OK. build log:"
else echo "  !!! BUILD FAILED !!! build log:"
fi
echo "      $HOSTNAME:$LOG"

# cat $LOG

[ $STATUS != 0 ] && exit $STATUS
