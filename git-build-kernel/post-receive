#!/bin/bash
# .git/hooks/post-receive --> git-build-kernel automatic push builder
# Kamal Mostafa <kamal@canonical.com>
# Copyright 2022 Canonical Ltd.
# Copyright (c) 2022 Krzysztof Kozlowski <krzk@kernel.org>
#
# SPDX-License-Identifier: GPL-3.0-only

### directory containing the git-build-kernel script (the same directory where
### the post-receive hook is located)
GBK_DIR="$(dirname "$(readlink -e "${BASH_SOURCE[0]}")")"

# echo "pwd is:" ; pwd		# Nb. we will be run from inside ".git/"

while read old_object new_object ref_name
do
	#echo "old_object=$old_object"
	#echo "new_object=$new_object"
	#echo "ref_name=$ref_name"

	### do not trigger on ref/branch deletions
	[ "$new_object" = "0000000000000000000000000000000000000000" ] && \
			continue

	ref_p1="${ref_name#refs/}"
	ref_p2="${ref_p1#*/}"
	ref_p1="${ref_p1%%/*}"

	#echo "ref_p1=$ref_p1"
	#echo "ref_p2=$ref_p2"

	arch=x86_64
	config=defconfig
	target=""
	### handle e.g. "build-i386-defconfig"
	ref_p2_prefix="${ref_p2%%-*}"

	case "$ref_p2_prefix" in
		build)
			;;
		dt_binding_check|dt_compatible_check|dtbs_check)
			target="-t $ref_p2_prefix"
			;;
		*)
			echo "skipping unmatched target $ref_p2_prefix"
			exit 0
			;;
	esac

	opts="${ref_p2#*-}"
	opts_arch="${opts%%-*}"
	opts_cfg="${opts##*-}"
	[ "$opts_arch" = "x86_64" ] && arch=x86_64
	[ "$opts_arch" = "i386" ] && arch=i386
	[ "$opts_arch" = "alpha" ] && arch=alpha
	[ "$opts_arch" = "arm" ] && arch=arm
	[ "$opts_arch" = "arm64" ] && arch=arm64
	[ "$opts_arch" = "m68k" ] && arch=m68k
	[ "$opts_arch" = "mips" ] && arch=mips
	[ "$opts_arch" = "mips64" ] && arch=mips64
	[ "$opts_arch" = "powerpc" ] && arch=powerpc
	[ "$opts_arch" = "powerpc64" ] && arch=powerpc64
	[ "$opts_arch" = "riscv" ] && arch=riscv
	[ "$opts_arch" = "s390" ] && arch=s390
	[ "$opts_arch" = "sparc" ] && arch=sparc

	[ "$opts_cfg" != "$opts_arch" ] && config="$opts_cfg"
	case "$config" in
	*config)
		;;
	*)
		config="${config}_defconfig"
		;;
	esac

	echo "building ... (ok to interrupt, build will continue) ..."

	$GBK_DIR/git-build-kernel -r "$ref_name" -a $arch -c $config $target

	### dispose of the "refs/build/*" refname file
	rm "$ref_name"
done
